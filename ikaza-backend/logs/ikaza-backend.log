2025-10-23 00:52:09 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 21.0.2 with PID 4864 (D:\proyecto-ikaza-web\ikaza-backend\target\classes started by user in D:\proyecto-ikaza-web\ikaza-backend)
2025-10-23 00:52:10 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-23 00:52:10 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-23 00:52:10 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-23 00:52:10 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-23 00:52:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-23 00:52:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-23 00:52:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 178 ms. Found 12 JPA repository interfaces.
2025-10-23 00:52:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-23 00:52:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-23 00:52:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 1 MongoDB repository interface.
2025-10-23 00:52:14 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-23 00:52:14 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-23 00:52:14 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-23 00:52:14 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-23 00:52:14 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 4359 ms
2025-10-23 00:52:15 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-23 00:52:15 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-23 00:52:15 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-23 00:52:15 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-23 00:52:15 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-23 00:52:16 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@13b56b7c
2025-10-23 00:52:16 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-23 00:52:17 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-23 00:52:17 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-23 00:52:19 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-23 00:52:23 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-23 00:52:23 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-23 00:52:25 [restartedMain] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - Filter 'firebaseAuthTokenFilter' configured for use
2025-10-23 00:52:28 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 10", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/21.0.2+13-LTS-58"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@a87aafe, com.mongodb.Jep395RecordCodecProvider@55cde236, com.mongodb.KotlinCodecProvider@532ce22]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-23 00:52:28 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-23 00:52:29 [cluster-ClusterId{value='68f9c29cb762665c3b0b8c53', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, cryptd=false, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=25, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=720381200, minRoundTripTimeNanos=0}
2025-10-23 00:52:29 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-23 00:52:30 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-10-23 00:52:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [api/inventario/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-10-23 00:52:30 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, FirebaseAuthTokenFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-23 00:52:31 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-23 00:52:31 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 22.717 seconds (process running for 24.015)
2025-10-23 00:53:11 [http-nio-8080-exec-4] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-23 00:53:11 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-23 00:53:11 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 00:53:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 00:53:12 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:53:12 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 00:53:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 00:53:12 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 00:53:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:53:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:53:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:53:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:53:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:53:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:53:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:53:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:53:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:53:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/categorias
2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/categorias
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:54:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-23 00:54:51 [http-nio-8080-exec-10] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-23 00:54:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/categorias
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/categorias
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-23 00:55:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:55:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/buscar?texto=olla&page=0&size=12
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/buscar
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/buscar?texto=olla&page=0&size=12
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/buscar
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        lower(p1_0.nombre_producto) like lower(('%'||?||'%')) escape '' 
        or lower(p1_0.descripcion_producto) like lower(('%'||?||'%')) escape '' 
    fetch
        first ? rows only
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 00:55:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 00:55:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/verificar-token
2025-10-23 00:55:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 00:55:54 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 00:55:55 [http-nio-8080-exec-10] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 00:55:55 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 00:55:55 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 00:55:55 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:55:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 00:55:55 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - ✅ Token válido para: cesar_2002_love@hotmail.com
2025-10-23 00:55:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 00:55:55 [http-nio-8080-exec-5] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:55 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.UsuarioController - 👤 Obteniendo perfil para UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:55:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 00:55:56 [http-nio-8080-exec-2] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:56 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.UsuarioController - 👤 Obteniendo perfil para UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:55:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:56:13 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/direcciones
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/direcciones
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/direcciones
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 00:56:13 [http-nio-8080-exec-7] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/direcciones
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/direcciones
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.DireccionController.cargarDirecciones(); target is of class [pe.com.ikaza.backend.controller.DireccionController]
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.DireccionController.cargarDirecciones(); target is of class [pe.com.ikaza.backend.controller.DireccionController]
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:56:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id_direccion,
        d1_0.alias,
        d1_0.codigo_postal,
        d1_0.direccion,
        d1_0.distrito,
        d1_0.es_principal,
        d1_0.fecha_creacion,
        d1_0.id_usuario,
        d1_0.latitud,
        d1_0.longitud,
        d1_0.pais,
        d1_0.provincia,
        d1_0.referencia,
        d1_0.region 
    from
        direcciones d1_0 
    where
        d1_0.id_usuario=?
2025-10-23 00:56:17 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/pagos
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/pagos
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pagos
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 00:56:17 [http-nio-8080-exec-8] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/pagos
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pagos
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.TarjetaController.cargarTarjetas(); target is of class [pe.com.ikaza.backend.controller.TarjetaController]
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.TarjetaController.cargarTarjetas(); target is of class [pe.com.ikaza.backend.controller.TarjetaController]
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:56:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id_metodo,
        t1_0.activo,
        t1_0.alias,
        t1_0.banco_emisor,
        t1_0.es_principal,
        t1_0.fecha_creacion,
        t1_0.fecha_expiracion,
        t1_0.id_usuario,
        t1_0.nombre_titular,
        t1_0.tipo,
        t1_0.tipo_tarjeta,
        t1_0.token_pago,
        t1_0.ultimos_4_digitos 
    from
        metodos_pago t1_0 
    where
        t1_0.id_usuario=? 
        and t1_0.activo
2025-10-23 00:56:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/pedidos/mis-pedidos
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/pedidos/mis-pedidos
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pedidos/mis-pedidos
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 00:56:20 [http-nio-8080-exec-3] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/pedidos/mis-pedidos
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pedidos/mis-pedidos
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pedido,
        p1_0.estado,
        p1_0.estado_pago,
        p1_0.fecha_pago,
        p1_0.fecha_pedido,
        p1_0.id_usuario,
        p1_0.metodo_pago,
        p1_0.numero_pedido,
        p1_0.subtotal,
        p1_0.total,
        p1_0.transaccion_id 
    from
        pedidos p1_0 
    where
        p1_0.id_usuario=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:56:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(dp1_0.id_detalle) 
    from
        detalle_pedido dp1_0 
    where
        dp1_0.id_pedido=?
2025-10-23 00:59:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 00:59:24 [http-nio-8080-exec-4] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.WebhookController - 📝 Creando preferencia de Mercado Pago con 1 items
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 00:59:24 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.WebhookController - 🔄 Creando pedido preliminar y reservando stock...
2025-10-23 00:59:24 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.PedidoService - 🔄 Iniciando pedido MERCADO PAGO para usuario: 7
2025-10-23 00:59:24 [http-nio-8080-exec-4] INFO  p.c.i.b.service.InventarioService - Validando stock para 1 items
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 00:59:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 00:59:24 [http-nio-8080-exec-4] ERROR p.c.i.backend.service.PedidoService - ❌ Error al procesar pedido MercadoPago
java.lang.RuntimeException: Inventario no encontrado para producto: 1
	at pe.com.ikaza.backend.service.InventarioService.lambda$validarStockDisponible$1(InventarioService.java:42)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at pe.com.ikaza.backend.service.InventarioService.validarStockDisponible(InventarioService.java:42)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:724)
	at pe.com.ikaza.backend.service.InventarioService$$SpringCGLIB$$0.validarStockDisponible(<generated>)
	at pe.com.ikaza.backend.service.PedidoService.procesarPedidoMercadoPago(PedidoService.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at pe.com.ikaza.backend.service.PedidoService$$SpringCGLIB$$0.procesarPedidoMercadoPago(<generated>)
	at pe.com.ikaza.backend.controller.WebhookController.crearPreferenciaMercadoPago(WebhookController.java:92)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at pe.com.ikaza.backend.security.FirebaseAuthTokenFilter.doFilterInternal(FirebaseAuthTokenFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1776)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:975)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:493)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-23 00:59:24 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/webhooks/mercadopago/create-preference. Spring Security manejará la auth.
2025-10-23 00:59:24 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 00:59:24 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/webhooks/mercadopago/create-preference
2025-10-23 00:59:24 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.WebhookController - 📝 Creando preferencia de Mercado Pago con 1 items
2025-10-23 00:59:24 [http-nio-8080-exec-1] ERROR p.c.i.b.controller.WebhookController - ❌ Error creando preferencia de Mercado Pago
java.lang.RuntimeException: Usuario no autenticado
	at pe.com.ikaza.backend.controller.WebhookController.extraerUsuario(WebhookController.java:263)
	at pe.com.ikaza.backend.controller.WebhookController.crearPreferenciaMercadoPago(WebhookController.java:65)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at pe.com.ikaza.backend.security.FirebaseAuthTokenFilter.doFilterInternal(FirebaseAuthTokenFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1776)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:975)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:493)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/pagos
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pagos
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1, Email: cesar_2002_love@hotmail.com
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:00:25 [http-nio-8080-exec-7] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: cesar_2002_love@hotmail.com (rol: CLIENTE)
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/pagos
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pagos
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.TarjetaController.cargarTarjetas(); target is of class [pe.com.ikaza.backend.controller.TarjetaController]
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.TarjetaController.cargarTarjetas(); target is of class [pe.com.ikaza.backend.controller.TarjetaController]
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:00:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id_metodo,
        t1_0.activo,
        t1_0.alias,
        t1_0.banco_emisor,
        t1_0.es_principal,
        t1_0.fecha_creacion,
        t1_0.fecha_expiracion,
        t1_0.id_usuario,
        t1_0.nombre_titular,
        t1_0.tipo,
        t1_0.tipo_tarjeta,
        t1_0.token_pago,
        t1_0.ultimos_4_digitos 
    from
        metodos_pago t1_0 
    where
        t1_0.id_usuario=? 
        and t1_0.activo
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1. Spring Security manejará la auth.
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:00:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 01:00:54 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:00:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 01:00:54 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:00:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 01:00:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:00:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 01:00:54 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:00:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 01:00:54 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 01:00:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/mVYvPiBUCDN6d7JiSeEGoZx3Wqs1. Spring Security manejará la auth.
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:00:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:00:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:00:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:00:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:00:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:00:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?firebaseUid=mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?firebaseUid=mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/auth/logout. Spring Security manejará la auth.
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?firebaseUid=mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:00:58 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:00:58 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - ✅ Último acceso actualizado para UID: mVYvPiBUCDN6d7JiSeEGoZx3Wqs1
2025-10-23 01:00:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:04:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/registro
2025-10-23 01:04:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/registro
2025-10-23 01:04:36 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:04:36 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:04:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/registro
2025-10-23 01:04:36 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:04:37 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<?> pe.com.ikaza.backend.controller.AuthController.registrarUsuario(pe.com.ikaza.backend.dto.request.RegistroRequest) with 2 errors: [Field error in object 'registroRequest' on field 'apellidos': rejected value []; codes [NotBlank.registroRequest.apellidos,NotBlank.apellidos,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [registroRequest.apellidos,apellidos]; arguments []; default message [apellidos]]; default message [Los apellidos son obligatorios]] [Field error in object 'registroRequest' on field 'apellidos': rejected value []; codes [Size.registroRequest.apellidos,Size.apellidos,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [registroRequest.apellidos,apellidos]; arguments []; default message [apellidos],100,2]; default message [Los apellidos deben tener entre 2 y 100 caracteres]] ]
2025-10-23 01:13:40 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 21.0.2 with PID 19996 (D:\proyecto-ikaza-web\ikaza-backend\target\classes started by user in D:\proyecto-ikaza-web\ikaza-backend)
2025-10-23 01:13:40 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-23 01:13:40 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-23 01:13:40 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-23 01:13:40 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-23 01:13:42 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-23 01:13:42 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-23 01:13:42 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 139 ms. Found 12 JPA repository interfaces.
2025-10-23 01:13:42 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-23 01:13:42 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-23 01:13:42 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 1 MongoDB repository interface.
2025-10-23 01:13:45 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-23 01:13:45 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-23 01:13:45 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-23 01:13:45 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-23 01:13:45 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 4457 ms
2025-10-23 01:13:46 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-23 01:13:46 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-23 01:13:46 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-23 01:13:47 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-23 01:13:47 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-23 01:13:48 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4f352c20
2025-10-23 01:13:48 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-23 01:13:48 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-23 01:13:48 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-23 01:13:52 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-23 01:13:55 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-23 01:13:56 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-23 01:13:58 [restartedMain] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - Filter 'firebaseAuthTokenFilter' configured for use
2025-10-23 01:14:01 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 10", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/21.0.2+13-LTS-58"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@53ff9fc7, com.mongodb.Jep395RecordCodecProvider@1190b6a2, com.mongodb.KotlinCodecProvider@36fa6732]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-23 01:14:02 [cluster-ClusterId{value='68f9c7a90bdbbb36108a5bbf', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, cryptd=false, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=25, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=241833900, minRoundTripTimeNanos=0}
2025-10-23 01:14:02 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-23 01:14:03 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-23 01:14:03 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-10-23 01:14:04 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [api/inventario/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-10-23 01:14:04 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, FirebaseAuthTokenFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-23 01:14:05 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-23 01:14:05 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 26.145 seconds (process running for 27.602)
2025-10-23 01:15:31 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-23 01:15:31 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-23 01:15:31 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 9 ms
2025-10-23 01:15:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/auth/registro
2025-10-23 01:15:31 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:15:31 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:15:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/auth/registro
2025-10-23 01:15:31 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:15:32 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2025-10-23 01:15:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/registro
2025-10-23 01:15:44 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:15:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:15:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/registro
2025-10-23 01:15:44 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:15:45 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 📝 Intentando registrar usuario: ikazaimport@gmail.com
2025-10-23 01:15:45 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Iniciando registro para: ikazaimport@gmail.com
2025-10-23 01:15:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario 
    from
        usuarios u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
2025-10-23 01:15:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario 
    from
        usuarios u1_0 
    where
        u1_0.numero_documento=? 
    fetch
        first ? rows only
2025-10-23 01:15:48 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Usuario creado en Firebase con UID: Nl48xVRWY0PFJFLgHnR0UwGDfqJ3
2025-10-23 01:15:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.nombre_rol=?
2025-10-23 01:15:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        usuarios
        (activo, apellidos, email, fecha_actualizacion, fecha_creacion, fecha_nacimiento, firebase_uid, nombres, numero_documento, password, prefijo_telefono, id_rol, telefono, telefono_verificado, tipo_documento, ultimo_acceso) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-23 01:15:49 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Usuario sincronizado con PostgreSQL ID: 14
2025-10-23 01:15:49 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Usuario registrado exitosamente: ikazaimport@gmail.com
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:23:56 [http-nio-8080-exec-6] WARN  p.c.i.b.s.FirebaseAuthTokenFilter - ⚠️ Usuario no encontrado en BD - UID: SphD73fPeiNDsGqS5VwHTziQIKc2. Debe registrarse primero.
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:23:56 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 01:23:56 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 01:23:56 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:23:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:23:56 [http-nio-8080-exec-6] WARN  p.c.i.b.controller.AuthController - ❌ Token inválido: Usuario no encontrado en la base de datos
2025-10-23 01:23:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:23:58 [http-nio-8080-exec-8] WARN  p.c.i.b.s.FirebaseAuthTokenFilter - ⚠️ Usuario no encontrado en BD - UID: SphD73fPeiNDsGqS5VwHTziQIKc2. Debe registrarse primero.
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:23:58 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:23:58 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:25:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/registro
2025-10-23 01:25:20 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:25:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:25:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/registro
2025-10-23 01:25:20 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/registro
2025-10-23 01:25:20 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - 📝 Intentando registrar usuario: ikazaimport@gmail.com
2025-10-23 01:25:20 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - 🔐 Iniciando registro para: ikazaimport@gmail.com
2025-10-23 01:25:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario 
    from
        usuarios u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
2025-10-23 01:25:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario 
    from
        usuarios u1_0 
    where
        u1_0.numero_documento=? 
    fetch
        first ? rows only
2025-10-23 01:25:21 [http-nio-8080-exec-1] ERROR p.c.i.backend.service.AuthService - ❌ Error al crear usuario en Firebase: The user with the provided email already exists (EMAIL_EXISTS).
2025-10-23 01:25:21 [http-nio-8080-exec-1] ERROR p.c.i.b.controller.AuthController - ❌ Error inesperado en registro: Error al registrar usuario en Firebase: The user with the provided email already exists (EMAIL_EXISTS).
java.lang.Exception: Error al registrar usuario en Firebase: The user with the provided email already exists (EMAIL_EXISTS).
	at pe.com.ikaza.backend.service.AuthService.registrarUsuario(AuthService.java:143)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at pe.com.ikaza.backend.service.AuthService$$SpringCGLIB$$0.registrarUsuario(<generated>)
	at pe.com.ikaza.backend.controller.AuthController.registrarUsuario(AuthController.java:41)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1776)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:975)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:493)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:29:08 [http-nio-8080-exec-3] WARN  p.c.i.b.s.FirebaseAuthTokenFilter - ⚠️ Usuario no encontrado en BD - UID: SphD73fPeiNDsGqS5VwHTziQIKc2. Debe registrarse primero.
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:29:08 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 01:29:08 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 01:29:08 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:29:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:29:08 [http-nio-8080-exec-3] WARN  p.c.i.b.controller.AuthController - ❌ Token inválido: Usuario no encontrado en la base de datos
2025-10-23 01:29:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 01:29:08 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:29:08 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:29:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:29:09 [http-nio-8080-exec-5] WARN  p.c.i.b.s.FirebaseAuthTokenFilter - ⚠️ Usuario no encontrado en BD - UID: SphD73fPeiNDsGqS5VwHTziQIKc2. Debe registrarse primero.
2025-10-23 01:29:09 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:29:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 01:29:09 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:29:09 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 01:29:09 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 01:29:09 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:29:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:29:09 [http-nio-8080-exec-5] WARN  p.c.i.b.controller.AuthController - ❌ Token inválido: Usuario no encontrado en la base de datos
2025-10-23 01:32:28 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 01:32:28 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:32:28 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:32:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:32:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:32:29 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:32:29 [http-nio-8080-exec-6] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: CLIENTE)
2025-10-23 01:32:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 01:32:29 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:32:29 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 01:32:29 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 01:32:29 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:32:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:32:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:32:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:32:33 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - ✅ Token válido para: ikazaimport@gmail.com
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/pagos
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pagos
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:32:35 [http-nio-8080-exec-7] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: CLIENTE)
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/pagos
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pagos
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.TarjetaController.cargarTarjetas(); target is of class [pe.com.ikaza.backend.controller.TarjetaController]
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.TarjetaController.cargarTarjetas(); target is of class [pe.com.ikaza.backend.controller.TarjetaController]
2025-10-23 01:32:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 01:32:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:32:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id_metodo,
        t1_0.activo,
        t1_0.alias,
        t1_0.banco_emisor,
        t1_0.es_principal,
        t1_0.fecha_creacion,
        t1_0.fecha_expiracion,
        t1_0.id_usuario,
        t1_0.nombre_titular,
        t1_0.tipo,
        t1_0.tipo_tarjeta,
        t1_0.token_pago,
        t1_0.ultimos_4_digitos 
    from
        metodos_pago t1_0 
    where
        t1_0.id_usuario=? 
        and t1_0.activo
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:32:58 [http-nio-8080-exec-8] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: CLIENTE)
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:32:58 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.UsuarioController - 👤 Obteniendo perfil para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:32:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/direcciones
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/direcciones
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:33:00 [http-nio-8080-exec-9] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: CLIENTE)
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/direcciones
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/direcciones
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.DireccionController.cargarDirecciones(); target is of class [pe.com.ikaza.backend.controller.DireccionController]
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.DireccionController.cargarDirecciones(); target is of class [pe.com.ikaza.backend.controller.DireccionController]
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        d1_0.id_direccion,
        d1_0.alias,
        d1_0.codigo_postal,
        d1_0.direccion,
        d1_0.distrito,
        d1_0.es_principal,
        d1_0.fecha_creacion,
        d1_0.id_usuario,
        d1_0.latitud,
        d1_0.longitud,
        d1_0.pais,
        d1_0.provincia,
        d1_0.referencia,
        d1_0.region 
    from
        direcciones d1_0 
    where
        d1_0.id_usuario=?
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/pedidos/mis-pedidos
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pedidos/mis-pedidos
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:33:01 [http-nio-8080-exec-2] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: CLIENTE)
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/pedidos/mis-pedidos
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/pedidos/mis-pedidos
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pedido,
        p1_0.estado,
        p1_0.estado_pago,
        p1_0.fecha_pago,
        p1_0.fecha_pedido,
        p1_0.id_usuario,
        p1_0.metodo_pago,
        p1_0.numero_pedido,
        p1_0.subtotal,
        p1_0.total,
        p1_0.transaccion_id 
    from
        pedidos p1_0 
    where
        p1_0.id_usuario=?
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:33:02 [http-nio-8080-exec-1] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: CLIENTE)
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:02 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.UsuarioController - 👤 Obteniendo perfil para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:33:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?firebaseUid=SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?firebaseUid=SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: CLIENTE
2025-10-23 01:33:10 [http-nio-8080-exec-5] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: CLIENTE)
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?firebaseUid=SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:33:10 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:33:10 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Último acceso actualizado para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:33:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:33:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-vendido
2025-10-23 01:33:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-recientes?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/por-agotarse?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-baratos?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 01:33:10 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:33:10 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:33:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 01:33:10 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:33:10 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:33:10 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:33:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:33:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:33:10 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:33:10 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:33:10 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:33:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:33:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 01:33:10 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:33:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 01:33:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 01:33:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 01:33:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 01:33:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:33:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:33:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:33:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:33:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:33:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:33:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:33:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:33:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:33:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:33:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:33:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:34:18 [http-nio-8080-exec-4] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:34:18 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 01:34:18 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 01:34:18 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:34:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:34:18 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - ✅ Token válido para: ikazaimport@gmail.com
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:34:20 [http-nio-8080-exec-7] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:34:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:34:20 [http-nio-8080-exec-2] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:34:20 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:34:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:34:20 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:35:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:35:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:35:53 [http-nio-8080-exec-5] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:36:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:37:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:37:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/inventario/movimientos/producto/1
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/inventario/movimientos/producto/1
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/movimientos/producto/1
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:37:48 [http-nio-8080-exec-10] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/inventario/movimientos/producto/1
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/movimientos/producto/1
2025-10-23 01:37:48 [http-nio-8080-exec-10] INFO  p.c.i.b.s.InventarioAdminService - Obteniendo movimientos para producto: 1
2025-10-23 01:37:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mi1_0.id_movimiento,
        mi1_0.cantidad,
        mi1_0.fecha_movimiento,
        mi1_0.motivo,
        mi1_0.id_producto,
        mi1_0.stock_anterior,
        mi1_0.stock_nuevo,
        mi1_0.tipo_movimiento,
        mi1_0.id_usuario 
    from
        movimientos_inventario mi1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=mi1_0.id_producto 
    where
        p1_0.id_producto=? 
    order by
        mi1_0.fecha_movimiento desc
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/inventario/movimientos/producto/1
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/movimientos/producto/1
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:38:19 [http-nio-8080-exec-3] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/inventario/movimientos/producto/1
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/movimientos/producto/1
2025-10-23 01:38:19 [http-nio-8080-exec-3] INFO  p.c.i.b.s.InventarioAdminService - Obteniendo movimientos para producto: 1
2025-10-23 01:38:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        mi1_0.id_movimiento,
        mi1_0.cantidad,
        mi1_0.fecha_movimiento,
        mi1_0.motivo,
        mi1_0.id_producto,
        mi1_0.stock_anterior,
        mi1_0.stock_nuevo,
        mi1_0.tipo_movimiento,
        mi1_0.id_usuario 
    from
        movimientos_inventario mi1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=mi1_0.id_producto 
    where
        p1_0.id_producto=? 
    order by
        mi1_0.fecha_movimiento desc
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/inventario/producto/1/ajustar
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:39:08 [http-nio-8080-exec-5] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:08 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:09 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `pe.com.ikaza.backend.entity.MovimientoInventario$TipoMovimiento` from String "entrada": not one of the values accepted for Enum class: [SALIDA, ENTRADA, DEVOLUCION, AJUSTE]]
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/inventario/producto/1/ajustar. Spring Security manejará la auth.
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:39:09 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:39:21 [http-nio-8080-exec-2] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:21 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:21 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `pe.com.ikaza.backend.entity.MovimientoInventario$TipoMovimiento` from String "entrada": not one of the values accepted for Enum class: [SALIDA, ENTRADA, DEVOLUCION, AJUSTE]]
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/inventario/producto/1/ajustar. Spring Security manejará la auth.
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:39:21 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:39:27 [http-nio-8080-exec-9] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:27 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:27 [http-nio-8080-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `pe.com.ikaza.backend.entity.MovimientoInventario$TipoMovimiento` from String "entrada": not one of the values accepted for Enum class: [SALIDA, ENTRADA, DEVOLUCION, AJUSTE]]
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/1/ajustar
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/inventario/producto/1/ajustar
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/inventario/producto/1/ajustar. Spring Security manejará la auth.
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:39:27 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:13 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - 🧹 Iniciando limpieza de pedidos preliminares antiguos...
2025-10-23 01:44:16 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pedido,
        p1_0.estado,
        p1_0.estado_pago,
        p1_0.fecha_pago,
        p1_0.fecha_pedido,
        p1_0.id_usuario,
        p1_0.metodo_pago,
        p1_0.numero_pedido,
        p1_0.subtotal,
        p1_0.total,
        p1_0.transaccion_id 
    from
        pedidos p1_0 
    where
        p1_0.estado=? 
        and p1_0.metodo_pago=? 
        and p1_0.fecha_pedido<?
2025-10-23 01:44:18 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:19 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pago,
        p1_0.banco_emisor,
        p1_0.datos_pasarela_json,
        p1_0.estado,
        p1_0.fecha_creacion,
        p1_0.fecha_pago,
        p1_0.id_metodo,
        p1_0.metodo_usado,
        p1_0.monto,
        p1_0.id_pedido,
        p2_0.id_pedido,
        p2_0.estado,
        p2_0.estado_pago,
        p2_0.fecha_pago,
        p2_0.fecha_pedido,
        p2_0.id_usuario,
        p2_0.metodo_pago,
        p2_0.numero_pedido,
        p2_0.subtotal,
        p2_0.total,
        p2_0.transaccion_id,
        p1_0.referencia_pasarela,
        p1_0.tipo_tarjeta,
        p1_0.transaccion_externa_id,
        p1_0.ultimos_4_digitos 
    from
        pagos p1_0 
    join
        pedidos p2_0 
            on p2_0.id_pedido=p1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:24 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:29 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id_rol=u1_0.id_rol 
    where
        u1_0.id_usuario=?
2025-10-23 01:44:30 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 3
2025-10-23 01:44:31 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:34 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 01:44:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 01:44:34 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 01:44:34 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 01:44:34 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:44:34 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:44:34 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:44:34 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:44:34 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:34 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:34 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:34 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 01:44:34 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 01:44:34 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:34 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 01:44:34 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:44:34 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:44:34 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:44:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 01:44:34 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:44:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 01:44:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 01:44:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 01:44:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 01:44:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:36 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:36 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:36 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:44:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:44:37 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:44:37 [http-nio-8080-exec-2] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:44:37 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:44:37 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:44:37 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:37 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:44:37 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-587192: Inventario no encontrado
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:44:37 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:44:37 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 4
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:44:37 [http-nio-8080-exec-1] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:37 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:37 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:37 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-578579: Inventario no encontrado
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:37 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:37 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:37 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 5
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:37 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:37 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:37 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-245011: Inventario no encontrado
2025-10-23 01:44:37 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:37 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 6
2025-10-23 01:44:38 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:38 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-312343: Inventario no encontrado
2025-10-23 01:44:38 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:38 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 7
2025-10-23 01:44:38 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:38 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-441345: Inventario no encontrado
2025-10-23 01:44:38 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:38 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 8
2025-10-23 01:44:38 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:39 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-258257: Inventario no encontrado
2025-10-23 01:44:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:39 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 9
2025-10-23 01:44:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:39 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-875663: Inventario no encontrado
2025-10-23 01:44:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:39 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 10
2025-10-23 01:44:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:39 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-855323: Inventario no encontrado
2025-10-23 01:44:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        dp1_0.id_detalle,
        dp1_0.cantidad,
        dp1_0.color_seleccionado,
        dp1_0.id_pedido,
        dp1_0.precio_unitario,
        dp1_0.id_producto,
        dp1_0.subtotal,
        dp1_0.talla_seleccionada 
    from
        detalle_pedido dp1_0 
    left join
        pedidos p1_0 
            on p1_0.id_pedido=dp1_0.id_pedido 
    where
        p1_0.id_pedido=?
2025-10-23 01:44:39 [scheduling-1] INFO  p.c.i.b.service.InventarioService - Liberando stock reservado para pedido: 11
2025-10-23 01:44:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-23 01:44:39 [scheduling-1] ERROR p.c.i.backend.service.PedidoService - ❌ Error al limpiar pedido PED-20251021-691905: Inventario no encontrado
2025-10-23 01:44:39 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - ✅ Limpieza finalizada. Pedidos eliminados: 0
2025-10-23 01:44:40 [scheduling-1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:804)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at pe.com.ikaza.backend.service.PedidoService$$SpringCGLIB$$0.limpiarPedidosPreliminaresAntiguos(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.runInternal(ScheduledMethodRunnable.java:130)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.lambda$run$2(ScheduledMethodRunnable.java:124)
	at io.micrometer.observation.Observation.observe(Observation.java:498)
	at org.springframework.scheduling.support.ScheduledMethodRunnable.run(ScheduledMethodRunnable.java:124)
	at org.springframework.scheduling.config.Task$OutcomeTrackingRunnable.run(Task.java:85)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:358)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 01:44:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 01:44:47 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 01:44:47 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:44:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 01:44:47 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:44:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:44:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:44:47 [http-nio-8080-exec-3] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:47 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:44:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?firebaseUid=SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:45:46 [http-nio-8080-exec-9] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?firebaseUid=SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:45:46 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 01:45:46 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 01:45:46 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:45:46 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:45:46 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 01:45:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:45:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:45:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:45:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:45:46 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:45:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:45:46 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - ✅ Último acceso actualizado para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:45:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:46:19 [http-nio-8080-exec-7] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:46:19 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 01:46:19 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 01:46:19 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:46:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:46:19 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - ✅ Token válido para: ikazaimport@gmail.com
2025-10-23 01:46:32 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:32 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:46:33 [http-nio-8080-exec-10] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:46:33 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:46:33 [http-nio-8080-exec-2] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:46:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:46:35 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:46:35 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:46:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:46:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:46:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:46:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:47:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 01:47:20 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 01:47:20 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 01:47:20 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:47:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:47:20 [http-nio-8080-exec-9] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:21 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?firebaseUid=SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:47:25 [http-nio-8080-exec-7] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?firebaseUid=SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/logout
2025-10-23 01:47:25 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:47:25 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - ✅ Último acceso actualizado para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-vendido
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-23 01:47:25 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:47:25 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-23 01:47:25 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/por-agotarse
2025-10-23 01:47:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-recientes
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos/mas-baratos
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/verificar-token
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:47:42 [http-nio-8080-exec-8] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/verificar-token
2025-10-23 01:47:42 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/auth/verificar-token
2025-10-23 01:47:42 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - 🔍 Verificando token...
2025-10-23 01:47:42 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - 🔍 Verificando token de Firebase...
2025-10-23 01:47:43 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - ✅ Token válido para UID: SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:47:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:47:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        apellidos=?,
        email=?,
        fecha_actualizacion=?,
        fecha_nacimiento=?,
        firebase_uid=?,
        nombres=?,
        numero_documento=?,
        password=?,
        prefijo_telefono=?,
        id_rol=?,
        telefono=?,
        telefono_verificado=?,
        tipo_documento=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-23 01:47:43 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - ✅ Token válido para: ikazaimport@gmail.com
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:47:43 [http-nio-8080-exec-4] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: SphD73fPeiNDsGqS5VwHTziQIKc2, Email: ikazaimport@gmail.com
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.apellidos,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.fecha_nacimiento,
        u1_0.firebase_uid,
        u1_0.nombres,
        u1_0.numero_documento,
        u1_0.password,
        u1_0.prefijo_telefono,
        u1_0.id_rol,
        u1_0.telefono,
        u1_0.telefono_verificado,
        u1_0.tipo_documento,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de BD: ADMINISTRADOR
2025-10-23 01:47:43 [http-nio-8080-exec-7] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: ikazaimport@gmail.com (rol: ADMINISTRADOR)
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AccessDeniedHandlerImpl - Responding with 403 status code
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:43 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:43 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔐 No hay token Bearer - URI: /api/usuarios/perfil/SphD73fPeiNDsGqS5VwHTziQIKc2. Spring Security manejará la auth.
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-23 01:47:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
