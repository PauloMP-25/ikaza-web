2025-10-29 11:26:22 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 33012 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 11:26:22 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 11:26:22 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 11:26:22 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 11:26:22 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 11:26:23 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 11:26:23 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 11:26:23 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 12 JPA repository interfaces.
2025-10-29 11:26:23 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 11:26:23 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 11:26:23 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 1 MongoDB repository interface.
2025-10-29 11:26:24 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 11:26:24 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 11:26:24 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 11:26:24 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 11:26:24 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2299 ms
2025-10-29 11:26:24 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 11:26:24 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 11:26:24 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 11:26:25 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 11:26:25 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 11:26:25 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5cf5ab07
2025-10-29 11:26:25 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 11:26:25 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 11:26:25 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 11:26:27 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table categorias (
        id_categoria bigint generated by default as identity,
        activo boolean not null,
        descripcion_categoria TEXT,
        fecha_creacion timestamp(6) not null,
        nombre_categoria varchar(100) not null,
        primary key (id_categoria)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table clientes (
        id_cliente integer generated by default as identity,
        apellidos_cliente varchar(100) not null,
        fecha_actualizacion timestamp(6),
        fecha_nacimiento date,
        genero varchar(15),
        nombres_cliente varchar(100) not null,
        numero_documento varchar(20),
        prefijo_telefono varchar(5),
        telefono varchar(20),
        telefono_verificado boolean not null,
        tipo_documento varchar(20),
        id_usuario integer not null,
        primary key (id_cliente)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table detalle_pedido (
        id_detalle bigint generated by default as identity,
        cantidad integer not null,
        color_seleccionado varchar(50),
        precio_unitario numeric(10,2) not null,
        subtotal numeric(10,2) not null,
        talla_seleccionada varchar(20),
        id_pedido bigint not null,
        id_producto bigint not null,
        primary key (id_detalle)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table direcciones (
        id_direccion integer generated by default as identity,
        alias varchar(100),
        codigo_postal varchar(10),
        direccion varchar(255) not null,
        distrito varchar(100),
        es_principal BOOLEAN DEFAULT FALSE,
        fecha_creacion timestamp(6),
        id_usuario integer not null,
        latitud float(53),
        longitud float(53),
        pais varchar(100) not null,
        provincia varchar(100),
        referencia varchar(255),
        region varchar(100),
        primary key (id_direccion)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table historial_estado_pedido (
        id_historial bigint generated by default as identity,
        estado_anterior varchar(30) check (estado_anterior in ('PENDIENTE','CONFIRMADO','PROCESANDO','EN_PREPARACION','ENVIADO','EN_TRANSITO','EN_REPARTO','ENTREGADO','CANCELADO','DEVUELTO')),
        estado_nuevo varchar(30) not null check (estado_nuevo in ('PENDIENTE','CONFIRMADO','PROCESANDO','EN_PREPARACION','ENVIADO','EN_TRANSITO','EN_REPARTO','ENTREGADO','CANCELADO','DEVUELTO')),
        fecha_cambio timestamp(6) not null,
        id_pedido bigint not null,
        primary key (id_historial)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table inventario (
        id_inventario bigint generated by default as identity,
        fecha_actualizacion timestamp(6),
        stock_actual integer not null,
        stock_disponible integer,
        stock_reservado integer not null,
        id_producto bigint not null,
        primary key (id_inventario)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table metodos_pago (
        id_metodo integer generated by default as identity,
        activo BOOLEAN DEFAULT TRUE not null,
        alias varchar(50),
        banco_emisor varchar(30),
        es_principal BOOLEAN DEFAULT FALSE not null,
        fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        fecha_expiracion varchar(7),
        id_usuario integer not null,
        nombre_titular varchar(100),
        tipo varchar(50) not null,
        tipo_tarjeta varchar(20),
        token_pago varchar(500) not null,
        ultimos_4_digitos varchar(4),
        primary key (id_metodo)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table movimientos_inventario (
        id_movimiento bigint generated by default as identity,
        cantidad integer not null,
        fecha_movimiento timestamp(6) not null,
        motivo varchar(255),
        stock_anterior integer not null,
        stock_nuevo integer not null,
        tipo_movimiento varchar(50) not null check (tipo_movimiento in ('ENTRADA','SALIDA','AJUSTE','DEVOLUCION')),
        id_producto bigint not null,
        id_usuario integer,
        primary key (id_movimiento)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table pagos (
        id_pago bigint generated by default as identity,
        banco_emisor varchar(30),
        datos_pasarela_json TEXT,
        estado varchar(30) check (estado in ('PENDIENTE','PROCESANDO','APROBADO','RECHAZADO','REEMBOLSADO')),
        fecha_creacion timestamp(6),
        fecha_pago timestamp(6),
        id_metodo bigint,
        metodo_usado varchar(50) not null check (metodo_usado in ('MERCADO_PAGO','CULQI','TRANSFERENCIA_BANCARIA','EFECTIVO_CONTRAENTREGA')),
        monto numeric(10,2) not null,
        referencia_pasarela varchar(150),
        tipo_tarjeta varchar(20),
        transaccion_externa_id varchar(200),
        ultimos_4_digitos varchar(4),
        id_pedido bigint not null,
        primary key (id_pago)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table pedidos (
        id_pedido bigint generated by default as identity,
        estado varchar(30) not null check (estado in ('PENDIENTE','CONFIRMADO','PROCESANDO','EN_PREPARACION','ENVIADO','EN_TRANSITO','EN_REPARTO','ENTREGADO','CANCELADO','DEVUELTO')),
        estado_pago varchar(30) check (estado_pago in ('PENDIENTE','PROCESANDO','APROBADO','RECHAZADO','REEMBOLSADO')),
        fecha_pago timestamp(6),
        fecha_pedido timestamp(6) not null,
        id_usuario integer not null,
        metodo_pago varchar(30) check (metodo_pago in ('MERCADO_PAGO','CULQI','TRANSFERENCIA_BANCARIA','EFECTIVO_CONTRAENTREGA')),
        numero_pedido varchar(50) not null,
        subtotal numeric(10,2),
        total numeric(10,2) not null,
        transaccion_id varchar(100),
        primary key (id_pedido)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table productos (
        id_producto bigint generated by default as identity,
        calificacion_promedio numeric(3,2),
        descripcion_producto varchar(500),
        fecha_actualizacion timestamp(6),
        fecha_creacion timestamp(6) not null,
        mongo_product_id varchar(24),
        nombre_producto varchar(200) not null,
        precio numeric(10,2) not null,
        stock integer not null,
        stock_minimo integer,
        id_categoria bigint not null,
        primary key (id_producto)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    create table usuarios (
        id_usuario integer generated by default as identity,
        activo boolean not null,
        bloqueado_hasta timestamp(6),
        email varchar(150) not null,
        email_verificado boolean not null,
        fecha_creacion timestamp(6) not null,
        foto_perfil varchar(500),
        intentos_fallidos integer,
        password varchar(255) not null,
        proveedor_auth varchar(50),
        refresh_token varchar(500),
        rol varchar(50) not null,
        token_expiracion timestamp(6),
        ultimo_acceso timestamp(6),
        primary key (id_usuario)
    )
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists categorias 
       drop constraint if exists UK29mosksismnta90dn19gl3gr2
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - no existe la restricción «uk29mosksismnta90dn19gl3gr2» en la relación «categorias», omitiendo
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists categorias 
       add constraint UK29mosksismnta90dn19gl3gr2 unique (nombre_categoria)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists clientes 
       drop constraint if exists UK2viccgf178bd74vfbq8ctsv8t
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - no existe la restricción «uk2viccgf178bd74vfbq8ctsv8t» en la relación «clientes», omitiendo
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists clientes 
       add constraint UK2viccgf178bd74vfbq8ctsv8t unique (numero_documento)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists clientes 
       drop constraint if exists UKl8nfa1qkfrk958v1rx9h8anvb
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - no existe la restricción «ukl8nfa1qkfrk958v1rx9h8anvb» en la relación «clientes», omitiendo
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists clientes 
       add constraint UKl8nfa1qkfrk958v1rx9h8anvb unique (id_usuario)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists inventario 
       drop constraint if exists UKtlye33nglhh35y08rxqrumnfw
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - no existe la restricción «uktlye33nglhh35y08rxqrumnfw» en la relación «inventario», omitiendo
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists inventario 
       add constraint UKtlye33nglhh35y08rxqrumnfw unique (id_producto)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists pagos 
       drop constraint if exists UKhllc72uwnsxv6imjsttp92wyx
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - no existe la restricción «ukhllc72uwnsxv6imjsttp92wyx» en la relación «pagos», omitiendo
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists pagos 
       add constraint UKhllc72uwnsxv6imjsttp92wyx unique (id_pedido)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists pedidos 
       drop constraint if exists UK6ywv5771tibn93splh6t3ft06
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - no existe la restricción «uk6ywv5771tibn93splh6t3ft06» en la relación «pedidos», omitiendo
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists pedidos 
       add constraint UK6ywv5771tibn93splh6t3ft06 unique (numero_pedido)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists usuarios 
       drop constraint if exists UKkfsp0s1tflm1cwlj8idhqsad0
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-10-29 11:26:27 [restartedMain] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - no existe la restricción «ukkfsp0s1tflm1cwlj8idhqsad0» en la relación «usuarios», omitiendo
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists usuarios 
       add constraint UKkfsp0s1tflm1cwlj8idhqsad0 unique (email)
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists clientes 
       add constraint FKf6u564o4dprnq7uln5gjvidp3 
       foreign key (id_usuario) 
       references usuarios
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists detalle_pedido 
       add constraint FKh10qteor08f4cbxhsf97qtgyk 
       foreign key (id_pedido) 
       references pedidos
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists detalle_pedido 
       add constraint FKnwadx4gon4by0uw748yo8chit 
       foreign key (id_producto) 
       references productos
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists direcciones 
       add constraint FKk9knhuryk5fsqnn5blyo4f57 
       foreign key (id_usuario) 
       references usuarios
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists historial_estado_pedido 
       add constraint FKgnk4rqligw1d57to3x7juihk4 
       foreign key (id_pedido) 
       references pedidos
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists inventario 
       add constraint FK92r6ui4b0u2kxqad8cyiusrdn 
       foreign key (id_producto) 
       references productos
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists metodos_pago 
       add constraint FKaoiyjy5dag150kny8b2xw1ut8 
       foreign key (id_usuario) 
       references usuarios
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists movimientos_inventario 
       add constraint FK7ttlcxcscpdu0wa9vhq6celdu 
       foreign key (id_producto) 
       references productos
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists movimientos_inventario 
       add constraint FKox35q6568f5qoh8ii09cihhqt 
       foreign key (id_usuario) 
       references usuarios
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists pagos 
       add constraint FKrfg5sdbj438hkscav9i92bmct 
       foreign key (id_pedido) 
       references pedidos
2025-10-29 11:26:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table if exists productos 
       add constraint FKdtoa37luoxhhvbicrfiu5ygbj 
       foreign key (id_categoria) 
       references categorias
2025-10-29 11:26:27 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 11:26:27 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 11:26:28 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 11:26:28 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 11:26:28 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 11:26:30 [cluster-ClusterId{value='69024036ef4b0261a5989621', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 11:26:30 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@59db576a, com.mongodb.Jep395RecordCodecProvider@54dc3461, com.mongodb.KotlinCodecProvider@1e4e8d80]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 11:26:30 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 11:26:31 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 11:26:31 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 11:26:32 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 11:26:32 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 11.106 seconds (process running for 11.828)
2025-10-29 11:27:20 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 11:27:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 11:27:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-29 11:27:20 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:27:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:27:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:27:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:27:20 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:27:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:27:20 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:27:20 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:27:20 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:27:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:27:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:27:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:27:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:27:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:27:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:27:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/registro
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/registro
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/registro
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - 📝 Intentando registrar usuario: cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - 📝 Iniciando registro para: cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario 
    from
        usuarios u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        usuarios
        (activo, bloqueado_hasta, email, email_verificado, fecha_creacion, foto_perfil, intentos_fallidos, password, proveedor_auth, refresh_token, rol, token_expiracion, ultimo_acceso) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - ✅ Usuario registrado exitosamente - ID: 1
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📝 Creando perfil inicial Cliente para email: cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        clientes
        (apellidos_cliente, fecha_actualizacion, fecha_nacimiento, genero, nombres_cliente, numero_documento, prefijo_telefono, telefono, telefono_verificado, tipo_documento, id_usuario) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - ✅ Perfil Cliente inicial creado para Usuario ID: 1
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - ✅ Perfil Cliente inicial creado automáticamente para: cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - ✅ Usuario registrado exitosamente: cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:27:53 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 11:28:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:28:10 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 11:28:10 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:28:10 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 11:28:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:28:11 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 11:28:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?email=cristina@gmail.com
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/auth/logout
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 11:28:30 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina@gmail.com
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:28:30 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina@gmail.com
2025-10-29 11:28:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:28:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:28:31 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:28:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:28:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:28:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:28:31 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:28:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:28:31 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:28:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:28:31 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:28:31 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:28:31 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:28:31 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:28:31 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:28:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:28:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/registro
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/registro
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - 📝 Intentando registrar usuario: cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - 📝 Iniciando registro para: cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario 
    from
        usuarios u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        usuarios
        (activo, bloqueado_hasta, email, email_verificado, fecha_creacion, foto_perfil, intentos_fallidos, password, proveedor_auth, refresh_token, rol, token_expiracion, ultimo_acceso) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - ✅ Usuario registrado exitosamente - ID: 2
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📝 Creando perfil inicial Cliente para email: cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        clientes
        (apellidos_cliente, fecha_actualizacion, fecha_nacimiento, genero, nombres_cliente, numero_documento, prefijo_telefono, telefono, telefono_verificado, tipo_documento, id_usuario) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - ✅ Perfil Cliente inicial creado para Usuario ID: 2
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - ✅ Perfil Cliente inicial creado automáticamente para: cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - ✅ Usuario registrado exitosamente: cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:29:15 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:29:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:29:29 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:29:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:29:29 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1astocaza@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1astocaza@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:29 [http-nio-8080-exec-9] WARN  p.c.i.b.controller.AuthController - ⚠️ Credenciales inválidas: cristina1astocaza@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?email=cristina1@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/auth/logout
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina1@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:29 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina1@gmail.com
2025-10-29 11:29:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:29:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:29:29 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:29:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:29:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:29:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:29:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:29:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:29:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:29:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:29:29 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:29:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:29:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:29:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:29:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:29:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:29:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:29:33 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:29:33 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:29:33 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:29:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:29:33 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:29:34 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/auth/logout
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 11:29:45 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina1@gmail.com
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:29:45 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina1@gmail.com
2025-10-29 11:29:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:30:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:30:01 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:30:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:30:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:30:01 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:30:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:30:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:30:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:30:01 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:30:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:30:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:30:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:30:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:30:01 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:30:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:30:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:35:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:35:37 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:35:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:35:37 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:35:37 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:35:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:35:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:35:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:35:38 [http-nio-8080-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:35:38 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:35:38 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:35:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:35:38 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:35:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:35:38 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:36:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:36:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:36:19 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:36:19 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:36:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:36:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:36:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:36:19 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:36:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:36:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:36:19 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:36:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:36:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:36:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:36:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:36:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:36:42 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:36:42 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:36:42 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:38:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:38:23 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:38:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:38:23 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:38:23 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:38:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:38:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:38:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:38:23 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:23 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:23 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:38:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:38:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:38:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:38:42 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:38:42 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:38:42 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:38:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:38:53 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:38:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:38:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 11:38:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:38:53 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:38:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:38:53 [http-nio-8080-exec-9] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 11:38:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 11:38:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:58 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 11:38:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:59 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:38:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:38:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:38:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:38:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 11:38:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:38:59 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:38:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:38:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:42:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:42:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:42:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:42:33 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:42:33 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:42:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:42:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:42:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:42:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:42:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:42:33 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:42:33 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:42:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:42:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:42:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:42:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:42:59 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:42:59 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:42:59 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:43:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:43:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:43:04 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:43:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:43:04 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:43:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:43:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:43:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 11:43:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 11:43:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:43:04 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:43:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:43:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:43:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 11:43:52 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-10-29 11:43:52 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:43:52 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:43:52 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:43:52 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:43:52 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@27629fcf and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:43:52 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:44:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:44:01 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:44:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:44:01 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:44:01 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@27629fcf and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:44:01 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:44:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:44:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:44:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:44:19 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:44:19 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@27629fcf and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:44:19 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:44:26 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:44:26 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:44:26 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:44:26 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:44:26 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@27629fcf and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:44:26 [http-nio-8080-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:44:37 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:44:37 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:44:37 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:44:37 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:44:37 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@27629fcf and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:44:37 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:49:02 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 39248 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 11:49:02 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 11:49:02 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 11:49:02 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 11:49:02 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 11:49:03 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 11:49:03 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 11:49:03 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 12 JPA repository interfaces.
2025-10-29 11:49:03 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 11:49:03 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 11:49:03 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-10-29 11:49:04 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 11:49:04 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 11:49:04 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 11:49:04 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 11:49:04 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2252 ms
2025-10-29 11:49:05 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 11:49:05 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 11:49:05 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 11:49:05 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 11:49:05 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 11:49:05 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@788ab22b
2025-10-29 11:49:05 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 11:49:05 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 11:49:05 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 11:49:07 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 11:49:08 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 11:49:08 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 11:49:09 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 11:49:09 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 11:49:09 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 11:49:10 [cluster-ClusterId{value='69024586a2ff3890db57e574', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 11:49:10 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@1c457b0b, com.mongodb.Jep395RecordCodecProvider@40e3b20b, com.mongodb.KotlinCodecProvider@2cea6744]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 11:49:10 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 11:49:11 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 11:49:11 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 11:49:12 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 11:49:12 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 10.23 seconds (process running for 10.926)
2025-10-29 11:49:49 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 11:49:49 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 11:49:49 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-29 11:49:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:49:49 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:49:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:49:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:49:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:49:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:49:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:49:49 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 11:49:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 11:49:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:49:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 11:49:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 11:49:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 11:49:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:50:01 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:50:01 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:50:01 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:50:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:50:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:50:04 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:50:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:50:04 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:50:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:50:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:50:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 11:50:05 [http-nio-8080-exec-5] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 11:50:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 11:50:05 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:50:05 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:50:05 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:50:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:50:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 11:50:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:50:24 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:50:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:50:24 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:50:24 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@a67bf9e and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:50:24 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:50:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:50:34 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:50:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:50:34 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:50:34 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@a67bf9e and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:50:34 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:50:40 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:50:40 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:50:40 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:50:40 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:50:40 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@a67bf9e and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:50:40 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:51:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 11:51:01 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:51:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 11:51:01 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 11:51:01 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@a67bf9e and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 11:51:01 [http-nio-8080-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 11:57:08 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 38708 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 11:57:08 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 11:57:08 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 11:57:08 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 11:57:08 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 11:57:08 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 11:57:08 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 11:57:09 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 12 JPA repository interfaces.
2025-10-29 11:57:09 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 11:57:09 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 11:57:09 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-10-29 11:57:10 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 11:57:10 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 11:57:10 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 11:57:10 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 11:57:10 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2263 ms
2025-10-29 11:57:10 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 11:57:10 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 11:57:10 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 11:57:11 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 11:57:11 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 11:57:11 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@79d4ff00
2025-10-29 11:57:11 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 11:57:11 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 11:57:11 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 11:57:13 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 11:57:13 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 11:57:14 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 11:57:14 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 11:57:14 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 11:57:14 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 11:57:16 [cluster-ClusterId{value='6902476c3071da016fd0a88b', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 11:57:16 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@693786a1, com.mongodb.Jep395RecordCodecProvider@4427dbe9, com.mongodb.KotlinCodecProvider@450a0724]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 11:57:16 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 11:57:16 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 11:57:17 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 11:57:17 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 11:57:17 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 10.193 seconds (process running for 10.85)
2025-10-29 11:59:33 [http-nio-8080-exec-4] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 11:59:33 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 11:59:33 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-29 11:59:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:59:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:59:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:59:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:59:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 11:59:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 11:59:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 11:59:44 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:59:44 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 11:59:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:45 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 11:59:45 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:59:45 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:59:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:59:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:59:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:59:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:59:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:59:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:59:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:59:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:59:51 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 11:59:51 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:59:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:51 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:51 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:51 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:51 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:59:51 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 11:59:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:59:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:59:56 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:59:56 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 11:59:56 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:59:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 11:59:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 11:59:56 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 11:59:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 11:59:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 11:59:56 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 11:59:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 11:59:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 11:59:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 11:59:56 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 11:59:56 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 11:59:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 11:59:56 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 11:59:56 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 11:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 11:59:56 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:00:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:12 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:12 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:12 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:12 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:12 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:00:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:00:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:00:12 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:00:12 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:12 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:00:12 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:12 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:12 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:12 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:00:12 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:00:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:14 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:14 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:14 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:14 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:00:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:00:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:00:14 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:00:14 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:00:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:14 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:14 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:00:14 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:00:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:20 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:20 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:00:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:00:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:00:20 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:00:20 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:00:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:20 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:20 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:20 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:00:20 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:00:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:23 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:23 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:00:23 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:00:23 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:00:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:00:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:00:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:00:23 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:00:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:00:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:00:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:00:23 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:23 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:00:23 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:00:23 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:00:23 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:00:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:00:23 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:01:36 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 36992 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:01:36 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:01:36 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:01:36 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:01:36 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:01:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:01:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:01:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 12 JPA repository interfaces.
2025-10-29 12:01:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:01:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:01:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-10-29 12:01:38 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 12:01:38 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 12:01:38 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 12:01:38 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 12:01:38 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2423 ms
2025-10-29 12:01:39 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 12:01:39 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 12:01:39 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 12:01:39 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 12:01:39 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 12:01:40 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@62f552ae
2025-10-29 12:01:40 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 12:01:40 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 12:01:40 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 12:01:41 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 12:01:42 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 12:01:43 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 12:01:43 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 12:01:43 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 12:01:43 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 12:01:45 [cluster-ClusterId{value='690248794bbc4f7fb046e52d', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 12:01:45 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@6e2df031, com.mongodb.Jep395RecordCodecProvider@5b451732, com.mongodb.KotlinCodecProvider@693786a1]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 12:01:46 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 12:01:46 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 12:01:47 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 12:01:48 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 12:01:48 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 12.468 seconds (process running for 13.203)
2025-10-29 12:02:04 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 12:02:04 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 12:02:04 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-10-29 12:02:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:02:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:02:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:02:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:02:04 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:04 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:04 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:04 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:02:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:04 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:04 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:04 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:04 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:04 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:18 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:02:18 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:18 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:02:18 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina01@gmail.com
2025-10-29 12:02:18 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina01@gmail.com
2025-10-29 12:02:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:18 [http-nio-8080-exec-5] WARN  p.c.i.b.controller.AuthController - ⚠️ Credenciales inválidas: cristina01@gmail.com
2025-10-29 12:02:19 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:02:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:02:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:02:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:02:19 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:19 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:02:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:19 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:19 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:19 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:19 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:19 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:19 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:02:24 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:02:24 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:02:24 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:02:24 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:02:24 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:02:24 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:02:25 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:02:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:02:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:02:29 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:02:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:02:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:02:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:02:29 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:02:29 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:02:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:02:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:02:29 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:02:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:02:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:02:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:02:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:02:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:02:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:02:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:02:33 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:02:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:02:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:02:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:02:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:02:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:02:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:02:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:33 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:02:33 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:33 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:33 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:33 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:02:33 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:02:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:02:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:02:38 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:02:38 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:02:38 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:02:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:02:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:02:38 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:02:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:02:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:02:38 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:02:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:02:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:02:38 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:02:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:02:38 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:38 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:38 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:02:38 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:02:38 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:02:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:02:38 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:04:23 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 13900 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:04:23 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:04:23 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:04:23 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:04:23 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:04:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:04:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:04:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80 ms. Found 12 JPA repository interfaces.
2025-10-29 12:04:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:04:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:04:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 1 MongoDB repository interface.
2025-10-29 12:04:25 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 12:04:25 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 12:04:25 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 12:04:25 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 12:04:25 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2097 ms
2025-10-29 12:04:26 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 12:04:26 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 12:04:26 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 12:04:26 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 12:04:26 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 12:04:26 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6705a40c
2025-10-29 12:04:26 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 12:04:26 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 12:04:26 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 12:04:28 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 12:04:29 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 12:04:29 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 12:04:29 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 12:04:29 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 12:04:29 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 12:04:31 [cluster-ClusterId{value='6902491f02dd5ecfe27432ae', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 12:04:31 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@2d65bed4, com.mongodb.Jep395RecordCodecProvider@40cd121e, com.mongodb.KotlinCodecProvider@2a97ebdb]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 12:04:31 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 12:04:32 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 12:04:32 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 12:04:32 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 12:04:32 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 9.809 seconds (process running for 10.477)
2025-10-29 12:04:53 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 12:04:53 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 12:04:53 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-29 12:04:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:04:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:04:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:04:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:04:53 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:04:53 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:04:53 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:04:53 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:04:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:04:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:04:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:04:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:04:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:04:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:04:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:04:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:05:03 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:05:03 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:05:03 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:05:06 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:05:06 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:05:06 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:05:06 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:05:06 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:05:06 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:05:06 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:05:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 12:05:07 [http-nio-8080-exec-8] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 12:05:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:05:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:05:07 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:05:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:05:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:05:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:05:22 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:05:22 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:05:22 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 12:05:22 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 12:05:22 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@49620373 and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasRole('ADMINISTRADOR')]
2025-10-29 12:05:22 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 12:10:20 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 31580 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:10:20 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:10:20 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:10:20 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:10:20 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:10:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:10:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:10:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 12 JPA repository interfaces.
2025-10-29 12:10:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:10:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:10:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-10-29 12:10:22 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 12:10:22 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 12:10:22 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 12:10:22 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 12:10:22 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2281 ms
2025-10-29 12:10:23 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 12:10:23 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 12:10:23 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 12:10:23 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 12:10:23 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 12:10:23 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@38d60488
2025-10-29 12:10:23 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 12:10:23 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 12:10:23 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 12:10:25 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 12:10:26 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 12:10:26 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 12:10:26 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 12:10:26 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 12:10:26 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 12:10:28 [cluster-ClusterId{value='69024a84d4d385b5f75600e2', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 12:10:28 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@2d3b79f4, com.mongodb.Jep395RecordCodecProvider@7600870d, com.mongodb.KotlinCodecProvider@14f3e2be]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 12:10:28 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 12:10:29 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 12:10:29 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 12:10:30 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 12:10:30 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 10.294 seconds (process running for 11.013)
2025-10-29 12:10:54 [http-nio-8080-exec-4] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 12:10:54 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 12:10:54 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-10-29 12:10:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:10:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:10:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:10:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:10:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:10:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:10:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:10:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:10:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:10:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:10:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:10:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:10:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:10:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:10:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:10:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:10:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:11:04 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:11:04 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:11:04 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:11:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:11:04 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:11:04 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:05 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:11:05 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:11:05 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:11:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:11:07 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:11:07 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:11:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:11:07 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:11:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:11:07 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:11:07 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:11:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:11:07 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:11:07 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:07 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:07 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:07 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:07 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:07 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:07 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:07 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:11:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:07 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:11:07 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:11:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:11:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:11:10 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:11:10 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:11:10 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:11:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:11:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:11:10 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:11:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:11:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:11:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:11:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:11:10 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:11:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:11:10 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:10 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:10 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:10 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:11:10 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:10 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:10 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:11:10 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:11:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:11:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:11:15 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:11:15 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:11:15 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:11:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:11:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:11:15 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:11:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:11:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:11:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:11:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:11:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:11:15 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:11:15 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:15 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:15 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:11:15 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:15 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:15 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:15 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:11:15 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:11:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:11:15 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:11:33 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:11:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:11:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:11:33 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:11:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:33 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:11:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:33 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:11:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:11:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:11:33 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:03 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 20624 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:15:03 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:15:03 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:15:04 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:15:04 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:15:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:15:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:15:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 12 JPA repository interfaces.
2025-10-29 12:15:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:15:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:15:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-10-29 12:15:06 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 12:15:06 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 12:15:06 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 12:15:06 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 12:15:06 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2127 ms
2025-10-29 12:15:06 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 12:15:06 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 12:15:06 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 12:15:06 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 12:15:06 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 12:15:07 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3c878d0f
2025-10-29 12:15:07 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 12:15:07 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 12:15:07 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 12:15:08 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 12:15:09 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 12:15:10 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 12:15:10 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 12:15:10 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 12:15:10 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 12:15:11 [cluster-ClusterId{value='69024b9f83290018f1ed125c', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 12:15:11 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@4427dbe9, com.mongodb.Jep395RecordCodecProvider@450a0724, com.mongodb.KotlinCodecProvider@36856430]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 12:15:12 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 12:15:12 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 12:15:12 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 12:15:13 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 12:15:13 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 9.945 seconds (process running for 10.598)
2025-10-29 12:15:42 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 12:15:42 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 12:15:42 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-29 12:15:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:15:42 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:15:42 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:15:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:15:42 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:42 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:42 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:42 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:15:42 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:15:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:15:42 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:15:42 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:42 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:42 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:42 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:42 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:15:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:15:56 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:56 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:15:56 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:15:56 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:15:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:15:59 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:15:59 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:15:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:15:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:15:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:15:59 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:15:59 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:15:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:15:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:15:59 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:15:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:15:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:15:59 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:15:59 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:59 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:15:59 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:15:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:15:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:15:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:15:59 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:15:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:15:59 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:16:48 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 30484 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:16:48 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:16:48 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:16:48 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:16:48 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:16:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:16:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:16:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 12 JPA repository interfaces.
2025-10-29 12:16:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:16:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:16:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 1 MongoDB repository interface.
2025-10-29 12:16:51 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 12:16:51 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 12:16:51 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 12:16:51 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 12:16:51 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2152 ms
2025-10-29 12:16:51 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 12:16:51 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 12:16:51 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 12:16:51 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 12:16:51 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 12:16:52 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@50bd7c80
2025-10-29 12:16:52 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 12:16:52 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 12:16:52 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 12:16:53 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 12:16:54 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 12:16:55 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 12:16:55 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 12:16:55 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 12:16:55 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 12:16:57 [cluster-ClusterId{value='69024c09a1bab99785315211', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 12:16:57 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@210e36e2, com.mongodb.Jep395RecordCodecProvider@211dbf09, com.mongodb.KotlinCodecProvider@9e814d6]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 12:16:57 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 12:16:57 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 12:16:58 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 12:16:58 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 12:16:58 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 10.529 seconds (process running for 11.24)
2025-10-29 12:17:45 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 12:17:45 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 12:17:45 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-29 12:17:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:17:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:17:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:17:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:17:45 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:45 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:45 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:45 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:17:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:17:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:17:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:17:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:17:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:17:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:17:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:17:54 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:17:54 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:17:54 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:17:57 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:17:57 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:57 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:17:57 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 12:17:57 [http-nio-8080-exec-8] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 12:17:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:17:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:17:57 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:57 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:17:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:17:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 12:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:17:57 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:17:57 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:17:57 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:17:57 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:17:57 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:18:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:18:12 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:18:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 12:18:12 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 12:18:12 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@609a16ee and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasAuthority('ADMINISTRADOR')]
2025-10-29 12:18:12 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 12:18:17 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:18:17 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:18:17 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 12:18:17 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 12:18:17 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@609a16ee and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasAuthority('ADMINISTRADOR')]
2025-10-29 12:18:17 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 12:18:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:18:28 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:18:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 12:18:28 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 12:18:28 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Failed to authorize ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController] with authorization manager org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager@609a16ee and result ExpressionAuthorizationDecision [granted=false, expressionAttribute=hasAuthority('ADMINISTRADOR')]
2025-10-29 12:18:28 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authorization.AuthorizationDeniedException: Access Denied]
2025-10-29 12:21:17 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 36980 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:21:17 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:21:17 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:21:17 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:21:17 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:21:18 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:21:18 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:21:18 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 93 ms. Found 12 JPA repository interfaces.
2025-10-29 12:21:18 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:21:18 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:21:18 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 1 MongoDB repository interface.
2025-10-29 12:21:19 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 12:21:19 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 12:21:19 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 12:21:19 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 12:21:19 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2280 ms
2025-10-29 12:21:20 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 12:21:20 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 12:21:20 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 12:21:20 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 12:21:20 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 12:21:20 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@79d4ff00
2025-10-29 12:21:20 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 12:21:20 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 12:21:20 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 12:21:22 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 12:21:23 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 12:21:23 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 12:21:24 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 12:21:24 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 12:21:24 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 12:21:26 [cluster-ClusterId{value='69024d15f9de8592091ddad4', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 12:21:26 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@693786a1, com.mongodb.Jep395RecordCodecProvider@4427dbe9, com.mongodb.KotlinCodecProvider@450a0724]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 12:21:26 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 12:21:26 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 12:21:27 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 12:21:27 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 12:21:27 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 10.88 seconds (process running for 11.54)
2025-10-29 12:21:28 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 12:21:28 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 12:21:28 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-29 12:21:28 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:21:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:21:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:21:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:21:28 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:28 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:28 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:28 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:21:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:28 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:28 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:28 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:28 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:28 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:28 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:21:38 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:21:38 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:21:38 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:21:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:39 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:21:39 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:21:39 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:21:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:21:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:21:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:21:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:21:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:21:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:21:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:21:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:21:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:54 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:21:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:21:54 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:21:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:21:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:21:57 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:21:57 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:21:57 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:21:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:21:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:21:57 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:21:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:21:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:21:57 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:21:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:21:57 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:21:57 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:21:57 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:57 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:57 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:21:57 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:57 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:57 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:57 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:21:57 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:21:59 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:21:59 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:21:59 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:21:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:21:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:21:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:21:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:21:59 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:21:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:21:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:21:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:21:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:59 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:21:59 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:21:59 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:59 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:21:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:21:59 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:21:59 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:21:59 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:21:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:21:59 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:22:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:40 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:40 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:40 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:40 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:40 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:40 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:40 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:40 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:40 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:40 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:40 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:40 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:43 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:43 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:43 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:43 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:43 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:43 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:43 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:43 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:43 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:44 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:44 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:44 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:44 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:44 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:44 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:44 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:44 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:44 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:45 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:45 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:45 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:45 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:45 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:45 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:45 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:45 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:45 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:47 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:47 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:47 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:47 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:47 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:47 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:47 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:48 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:48 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:48 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:48 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:48 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:48 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:48 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:49 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:49 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:49 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:49 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:49 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:49 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:49 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:51 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:51 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:51 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:51 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:53 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:53 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:53 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:53 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:53 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:53 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:53 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:54 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:54 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:54 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:55 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:55 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:55 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:22:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:22:55 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:23:04 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:23:04 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:23:04 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:23:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:08 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:08 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:08 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:08 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:08 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:23:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:23:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:23:08 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:08 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:23:08 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:08 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:08 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:23:08 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:23:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:11 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:11 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:11 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:11 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:11 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:23:11 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:23:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:23:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:23:11 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:11 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:11 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:23:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:11 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:23:11 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:23:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:29 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:23:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:23:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:23:29 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:29 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:23:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:23:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:29 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:29 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:23:29 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:23:56 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:56 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:23:56 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:56 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:23:56 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:23:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:23:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:23:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:23:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:23:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-10-29 12:23:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:56 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:23:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:23:56 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error?limite=12
2025-10-29 12:23:56 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:23:56 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:23:56 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:23:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:23:56 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:27:11 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 34340 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:27:11 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:27:11 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:27:11 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:27:11 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:27:12 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:27:12 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:27:12 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 12 JPA repository interfaces.
2025-10-29 12:27:12 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:27:12 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:27:12 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 1 MongoDB repository interface.
2025-10-29 12:27:13 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 12:27:13 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 12:27:13 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 12:27:13 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 12:27:13 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2478 ms
2025-10-29 12:27:14 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 12:27:14 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 12:27:14 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 12:27:14 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 12:27:14 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 12:27:15 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3c878d0f
2025-10-29 12:27:15 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 12:27:15 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 12:27:15 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 12:27:17 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 12:27:18 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 12:27:18 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 12:27:19 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 12:27:19 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 12:27:19 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 12:27:21 [cluster-ClusterId{value='69024e79538151f29bfea483', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 12:27:21 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@4427dbe9, com.mongodb.Jep395RecordCodecProvider@450a0724, com.mongodb.KotlinCodecProvider@36856430]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 12:27:21 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 12:27:22 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 12:27:22 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 12:27:23 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 12:27:23 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 12.668 seconds (process running for 13.395)
2025-10-29 12:27:30 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 12:27:30 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 12:27:30 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-29 12:27:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:27:30 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:27:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:27:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:27:30 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:30 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:30 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:30 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:30 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:27:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:27:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:27:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:27:31 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:27:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:27:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:27:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:27:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:27:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:27:44 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:27:44 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:27:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:27:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:27:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:27:44 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:27:45 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:27:45 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:27:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:27:45 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:27:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:27:45 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:27:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:27:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:27:48 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:48 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:27:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:27:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:27:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 12:27:48 [http-nio-8080-exec-8] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 12:27:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:27:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:27:48 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:27:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:27:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:27:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:28:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:28:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:28:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:28:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:28:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:28:16 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:28:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:28:16 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:16 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:28:16 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:16 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:28:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:28:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:16 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:28:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:28:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:28:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:28:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:16 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:28:16 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:28:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:28:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:28:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:28:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:28:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:20 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:20 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:28:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:28:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:28:20 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:28:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:28:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:28:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:28:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:28:35 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:28:35 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:28:35 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:28:35 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:28:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:28:38 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:28:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:28:38 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:28:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:28:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 12:28:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:28:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:28:38 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:28:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:28:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:28:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:28:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:28:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:28:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:53 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:28:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:28:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:28:56 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:28:56 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:28:56 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:28:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:28:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:56 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:28:56 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:28:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:28:56 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:28:56 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:28:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:28:56 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:32:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:32:44 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:32:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:32:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:32:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:32:44 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:32:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:32:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:32:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:32:44 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:32:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:32:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:32:44 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:32:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:32:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:32:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:33:44 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:33:44 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:33:44 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:33:44 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:33:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:44 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:33:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:33:45 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:33:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:33:45 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:40:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?email=cristina1@gmail.com
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/auth/logout
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 12:40:30 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina1@gmail.com
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:40:30 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina1@gmail.com
2025-10-29 12:40:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:40:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:40:30 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:40:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:40:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:40:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:40:30 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:40:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:40:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:40:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:40:30 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:40:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:40:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:40:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:40:30 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:40:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:40:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:40:44 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:40:44 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:40:44 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:41:37 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:41:37 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:41:37 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:41:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:41:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:41:37 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:41:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:41:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:41:37 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:41:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:41:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:41:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:41:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:41:37 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:41:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:41:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:42:58 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:42:58 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:42:58 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:42:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:42:58 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:42:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:42:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 12:42:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:42:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:42:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:42:58 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:42:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:42:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:42:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:43:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:43:42 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:43:42 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:43:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:43:42 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:43:42 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:55:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 12:55:10 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/auth/logout
2025-10-29 12:55:10 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:55:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 12:55:10 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina1@gmail.com
2025-10-29 12:55:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:55:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:55:10 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina1@gmail.com
2025-10-29 12:55:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:55:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:55:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:55:10 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:55:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:55:10 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:55:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:55:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:55:10 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:55:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:55:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:55:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:55:10 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:55:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:55:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:55:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:55:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 12:55:28 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 12:55:28 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:55:28 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:56:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:56:01 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:01 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:56:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:56:01 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:01 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:56:07 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:56:07 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:07 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:56:07 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:56:07 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:07 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:56:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:56:08 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:08 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:56:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:56:08 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:08 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:56:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:56:10 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:10 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:56:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:56:10 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:56:10 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:57:23 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - 🧹 Iniciando limpieza de pedidos preliminares antiguos...
2025-10-29 12:57:23 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pedido,
        p1_0.estado,
        p1_0.estado_pago,
        p1_0.fecha_pago,
        p1_0.fecha_pedido,
        p1_0.id_usuario,
        p1_0.metodo_pago,
        p1_0.numero_pedido,
        p1_0.subtotal,
        p1_0.total,
        p1_0.transaccion_id 
    from
        pedidos p1_0 
    where
        p1_0.estado=? 
        and p1_0.metodo_pago=? 
        and p1_0.fecha_pedido<?
2025-10-29 12:57:23 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - ✅ Limpieza finalizada. Pedidos eliminados: 0
2025-10-29 12:58:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:58:13 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 12:58:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:58:13 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:58:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:58:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 12:58:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:58:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 12:58:13 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 12:58:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 12:58:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 12:58:36 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-10-29 12:58:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 12:58:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:58:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 12:58:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 12:58:38 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 12:58:38 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:38 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 12:58:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 12:58:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 12:58:38 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 12:58:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 12:58:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 12:58:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 12:58:38 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:38 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 12:58:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 12:58:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 12:58:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 12:58:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 12:58:38 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 12:58:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 12:58:38 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 12:59:58 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 36808 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 12:59:58 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 12:59:58 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 12:59:58 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 12:59:58 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 12:59:59 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:59:59 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 12:59:59 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 12 JPA repository interfaces.
2025-10-29 12:59:59 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 12:59:59 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 12:59:59 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-10-29 13:00:00 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 13:00:00 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 13:00:00 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 13:00:00 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 13:00:00 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2177 ms
2025-10-29 13:00:01 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 13:00:01 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 13:00:01 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 13:00:01 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 13:00:01 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 13:00:01 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@76f09a70
2025-10-29 13:00:01 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 13:00:01 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 13:00:01 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 13:00:03 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 13:00:04 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 13:00:04 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 13:00:04 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 13:00:04 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 13:00:04 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 13:00:06 [cluster-ClusterId{value='690256261ce4dd49ad9385e9', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.lambda$open$0(SocketStream.java:85)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:85)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:233)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.lookupServerDescription(DefaultServerMonitor.java:219)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitor.run(DefaultServerMonitor.java:176)
Caused by: java.net.ConnectException: Connection refused: getsockopt
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:639)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:543)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:594)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:284)
	at java.base/java.net.Socket.connect(Socket.java:659)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:76)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:104)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:79)
	... 3 common frames omitted
2025-10-29 13:00:06 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@693786a1, com.mongodb.Jep395RecordCodecProvider@4427dbe9, com.mongodb.KotlinCodecProvider@450a0724]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 13:00:06 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 13:00:07 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 13:00:07 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 13:00:08 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 13:00:08 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 10.235 seconds (process running for 10.966)
2025-10-29 13:00:11 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 13:00:11 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 13:00:11 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-29 13:00:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:00:11 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:00:11 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:00:11 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:12 [http-nio-8080-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-29 13:00:12 [http-nio-8080-exec-1] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-29 13:00:12 [http-nio-8080-exec-1] WARN  p.c.i.backend.service.AuthService - ⚠️ Credenciales inválidas para: cristina1@gmail.com
2025-10-29 13:00:12 [http-nio-8080-exec-1] WARN  p.c.i.b.controller.AuthController - ⚠️ Credenciales inválidas: cristina1@gmail.com
2025-10-29 13:00:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:00:12 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:00:12 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:00:12 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:00:12 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:00:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:00:12 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:00:12 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:00:12 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:00:12 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:00:12 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:00:12 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:00:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:00:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:00:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:00:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:00:14 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:00:14 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:00:14 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:00:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:00:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:00:56 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos
2025-10-29 13:00:56 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:00:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:00:56 [http-nio-8080-exec-1] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:00:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:01:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:01:13 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos
2025-10-29 13:01:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 13:01:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 13:01:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 13:01:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:01:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:01:16 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:01:16 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:01:16 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:16 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:01:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:01:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:01:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:01:16 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:01:16 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:01:16 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:16 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:01:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:01:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:01:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:01:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:01:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:01:16 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:01:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:01:16 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:01:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:01:19 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:01:19 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:19 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:01:19 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos
2025-10-29 13:01:19 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:01:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:01:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:01:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:01:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:01:19 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:01:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:01:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:01:24 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:01:24 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:01:24 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:01:24 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:24 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:01:24 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:01:24 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:01:24 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:01:24 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:01:24 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:01:24 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:01:24 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:01:24 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:01:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:01:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:01:24 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:01:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:01:24 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (calificacion_promedio, id_categoria, descripcion_producto, fecha_actualizacion, fecha_creacion, mongo_product_id, nombre_producto, precio, stock, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 13:02:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        inventario
        (fecha_actualizacion, id_producto, stock_actual, stock_reservado) 
    values
        (?, ?, ?, ?)
2025-10-29 13:02:15 [http-nio-8080-exec-9] INFO  org.mongodb.driver.cluster - Waiting for server to become available for operation with ID 15. Remaining time: 29989 ms. Selector: WritableServerSelector, topology description: {type=UNKNOWN, servers=[{address=localhost:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: getsockopt}}].
2025-10-29 13:06:20 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:06:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:06:20 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:06:20 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:20 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:06:20 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:06:20 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:06:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:06:20 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:06:20 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:06:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:06:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:06:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:06:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:06:20 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:06:20 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:06:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:06:30 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:06:30 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:06:30 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:06:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:06:30 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:31 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:06:31 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:06:31 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:06:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:06:33 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos
2025-10-29 13:06:33 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:06:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:06:34 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:06:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:06:34 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos
2025-10-29 13:06:34 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:34 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:06:34 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:06:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:06:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:06:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:06:34 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:06:34 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:34 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:06:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:06:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:06:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:06:51 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos
2025-10-29 13:06:51 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:51 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 13:06:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /error
2025-10-29 13:06:51 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:51 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-10-29 13:06:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:06:53 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:06:53 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:06:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:06:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:06:53 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:06:53 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:06:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:06:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:06:53 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:06:53 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:06:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:06:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:06:53 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:06:53 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:06:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:06:53 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:06:53 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:07:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:07:19 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:07:19 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:07:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:07:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:07:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:07:19 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:07:19 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:07:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:07:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:07:19 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:07:19 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:07:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:07:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:07:19 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:07:19 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:07:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:07:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:07:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:07:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:09:07 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:09:07 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:09:07 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:07 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:09:07 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:09:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:09:07 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:09:07 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:09:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:09:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:09:07 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:09:07 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:09:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:09:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:09:07 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:09:07 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:09:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:09:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:09:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:09:08 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:09:08 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:09:08 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:08 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:09:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:09:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:09:08 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:09:08 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:09:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:09:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:09:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:09:08 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:09:08 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:09:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:09:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:09:20 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:09:20 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:09:20 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:09:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:09:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:09:23 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:09:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:09:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:09:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:09:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:09:23 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:09:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:09:23 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:09:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:09:23 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:09:23 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:09:23 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:09:23 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:09:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (calificacion_promedio, id_categoria, descripcion_producto, fecha_actualizacion, fecha_creacion, mongo_product_id, nombre_producto, precio, stock, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 13:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        inventario
        (fecha_actualizacion, id_producto, stock_actual, stock_reservado) 
    values
        (?, ?, ?, ?)
2025-10-29 13:09:35 [http-nio-8080-exec-7] INFO  org.mongodb.driver.cluster - Waiting for server to become available for operation with ID 116. Remaining time: 29999 ms. Selector: WritableServerSelector, topology description: {type=UNKNOWN, servers=[{address=localhost:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: getsockopt}}].
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (calificacion_promedio, id_categoria, descripcion_producto, fecha_actualizacion, fecha_creacion, mongo_product_id, nombre_producto, precio, stock, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 13:10:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        inventario
        (fecha_actualizacion, id_producto, stock_actual, stock_reservado) 
    values
        (?, ?, ?, ?)
2025-10-29 13:10:26 [http-nio-8080-exec-1] INFO  org.mongodb.driver.cluster - Waiting for server to become available for operation with ID 180. Remaining time: 29999 ms. Selector: WritableServerSelector, topology description: {type=UNKNOWN, servers=[{address=localhost:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused: getsockopt}}].
2025-10-29 13:15:31 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 34404 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 13:15:31 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 13:15:31 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 13:15:31 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 13:15:31 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 13:15:32 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 13:15:32 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100 ms. Found 12 JPA repository interfaces.
2025-10-29 13:15:34 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 13:15:34 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 13:15:34 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 13:15:34 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 13:15:34 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2272 ms
2025-10-29 13:15:34 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 13:15:34 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 13:15:34 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 13:15:34 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 13:15:34 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 13:15:35 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@716085e8
2025-10-29 13:15:35 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 13:15:35 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 13:15:35 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 13:15:36 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 13:15:37 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 13:15:38 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 13:15:38 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 13:15:38 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 13:15:38 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 13:15:40 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'productoController': Unsatisfied dependency expressed through field 'productoService': Error creating bean with name 'productoService' defined in file [C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes\pe\com\ikaza\backend\service\ProductoService.class]: Post-processing of merged bean definition failed
2025-10-29 13:15:40 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 13:15:40 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-29 13:15:40 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-29 13:15:40 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-10-29 13:15:40 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-10-29 13:15:40 [restartedMain] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'productoController': Unsatisfied dependency expressed through field 'productoService': Error creating bean with name 'productoService' defined in file [C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes\pe\com\ikaza\backend\service\ProductoService.class]: Post-processing of merged bean definition failed
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:788)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1221)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1123)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at pe.com.ikaza.backend.BackendApplication.main(BackendApplication.java:16)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'productoService' defined in file [C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes\pe\com\ikaza\backend\service\ProductoService.class]: Post-processing of merged bean definition failed
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:584)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1698)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1643)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	... 25 common frames omitted
Caused by: java.lang.IllegalStateException: Failed to introspect Class [pe.com.ikaza.backend.service.ProductoService] from ClassLoader [org.springframework.boot.devtools.restart.classloader.RestartClassLoader@67e87a9e]
	at org.springframework.util.ReflectionUtils.getDeclaredFields(ReflectionUtils.java:756)
	at org.springframework.util.ReflectionUtils.doWithLocalFields(ReflectionUtils.java:689)
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.buildPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:437)
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findPersistenceMetadata(PersistenceAnnotationBeanPostProcessor.java:418)
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.findInjectionMetadata(PersistenceAnnotationBeanPostProcessor.java:377)
	at org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(PersistenceAnnotationBeanPostProcessor.java:353)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:581)
	... 33 common frames omitted
Caused by: java.lang.NoClassDefFoundError: org/springframework/data/mongodb/repository/MongoRepository
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:962)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:144)
	at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:454)
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:367)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.findClass(RestartClassLoader.java:136)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.loadClass(RestartClassLoader.java:118)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
	at java.base/java.lang.Class.getDeclaredFields0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredFields(Class.java:2917)
	at java.base/java.lang.Class.getDeclaredFields(Class.java:2247)
	at org.springframework.util.ReflectionUtils.getDeclaredFields(ReflectionUtils.java:751)
	... 40 common frames omitted
Caused by: java.lang.ClassNotFoundException: org.springframework.data.mongodb.repository.MongoRepository
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:547)
	at org.springframework.boot.devtools.restart.classloader.RestartClassLoader.loadClass(RestartClassLoader.java:121)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
	... 52 common frames omitted
2025-10-29 13:27:26 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 15544 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 13:27:26 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 13:27:26 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 13:27:26 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 13:27:26 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 13:27:26 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 13:27:26 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 13:27:27 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80 ms. Found 12 JPA repository interfaces.
2025-10-29 13:27:27 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-10-29 13:27:27 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-10-29 13:27:27 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-10-29 13:27:28 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 13:27:28 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 13:27:28 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 13:27:28 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 13:27:28 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2192 ms
2025-10-29 13:27:28 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 13:27:28 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 13:27:28 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 13:27:29 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 13:27:29 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 13:27:29 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@79d4ff00
2025-10-29 13:27:29 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 13:27:29 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 13:27:29 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 13:27:30 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 13:27:32 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 13:27:32 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 13:27:32 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 13:27:32 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 13:27:32 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 13:27:34 [restartedMain] INFO  org.mongodb.driver.client - MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Windows", "name": "Windows 11", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Oracle Corporation/25+37-LTS-3491"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@6e2df031, com.mongodb.Jep395RecordCodecProvider@5b451732, com.mongodb.KotlinCodecProvider@693786a1]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-10-29 13:27:34 [cluster-ClusterId{value='69025c96630d42e3584afad0', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster - Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, cryptd=false, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=25, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=26380300, minRoundTripTimeNanos=0}
2025-10-29 13:27:34 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 13:27:35 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 13:27:35 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 13:27:35 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 13:27:35 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 10.499 seconds (process running for 11.123)
2025-10-29 13:27:52 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 13:27:52 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 13:27:52 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:27:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (calificacion_promedio, id_categoria, descripcion_producto, fecha_actualizacion, fecha_creacion, mongo_product_id, nombre_producto, precio, stock, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 13:27:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        inventario
        (fecha_actualizacion, id_producto, stock_actual, stock_reservado) 
    values
        (?, ?, ?, ?)
2025-10-29 13:27:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        productos 
    set
        calificacion_promedio=?,
        id_categoria=?,
        descripcion_producto=?,
        fecha_actualizacion=?,
        mongo_product_id=?,
        nombre_producto=?,
        precio=?,
        stock=?,
        stock_minimo=? 
    where
        id_producto=?
2025-10-29 13:28:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:28:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:28:02 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:28:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:28:02 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:28:02 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:28:02 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:28:02 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:28:02 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:02 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:02 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:02 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:28:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:28:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:28:02 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:28:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:28:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:28:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:28:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:28:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:28:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:28:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:28:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:28:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:28:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:28:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:28:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:28:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:28:05 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:28:05 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:28:05 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:28:05 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:28:05 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:28:05 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:05 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:28:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:28:05 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:28:05 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:05 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:28:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:28:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:28:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:28:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:28:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:28:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:28:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:28:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:28:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:28:15 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:28:15 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:28:15 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:28:19 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:28:19 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:19 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:28:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:28:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:28:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:28:19 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:28:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:28:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:28:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:28:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:28:19 [http-nio-8080-exec-5] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 13:34:05 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:34:05 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:34:05 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:34:05 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:34:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:34:08 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:34:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:34:08 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:34:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:34:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:34:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:34:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:34:11 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:34:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:34:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (calificacion_promedio, id_categoria, descripcion_producto, fecha_actualizacion, fecha_creacion, mongo_product_id, nombre_producto, precio, stock, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        inventario
        (fecha_actualizacion, id_producto, stock_actual, stock_reservado) 
    values
        (?, ?, ?, ?)
2025-10-29 13:34:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        productos 
    set
        calificacion_promedio=?,
        id_categoria=?,
        descripcion_producto=?,
        fecha_actualizacion=?,
        mongo_product_id=?,
        nombre_producto=?,
        precio=?,
        stock=?,
        stock_minimo=? 
    where
        id_producto=?
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/auth/logout
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 13:34:47 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina1@gmail.com
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:47 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina1@gmail.com
2025-10-29 13:34:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:34:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:34:47 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:34:47 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:34:47 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:34:47 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:47 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:34:47 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:34:47 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:34:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:34:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:34:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:34:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:34:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:34:55 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:34:55 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:34:55 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 13:34:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:34:59 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:34:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:34:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:34:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 13:34:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=12&sort=nombreProducto&direction=ASC
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:34:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:35:03 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:35:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:35:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:13 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?email=cristina@gmail.com
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/auth/logout
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 13:35:13 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina@gmail.com
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:35:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:35:13 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:35:13 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:35:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:35:13 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina@gmail.com
2025-10-29 13:35:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:35:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:35:13 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:35:13 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:35:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:35:19 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:35:19 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-29 13:35:19 [http-nio-8080-exec-8] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-29 13:35:19 [http-nio-8080-exec-8] WARN  p.c.i.backend.service.AuthService - ⚠️ Credenciales inválidas para: cristina1@gmail.com
2025-10-29 13:35:19 [http-nio-8080-exec-8] WARN  p.c.i.b.controller.AuthController - ⚠️ Credenciales inválidas: cristina1@gmail.com
2025-10-29 13:35:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:35:19 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:35:19 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:35:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:35:19 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:35:19 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:35:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:35:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:35:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:35:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:35:22 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:35:22 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:35:22 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:35:25 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:35:25 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:25 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:35:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:35:25 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:35:25 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:25 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:25 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:35:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:35:25 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:35:26 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:35:26 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:35:26 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:35:26 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:35:26 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:35:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/4
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/productos/4
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos/4
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/productos/4
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 13:35:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing DELETE /api/productos/4
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos/4
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured DELETE /api/productos/4
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.eliminarProducto(java.lang.Long); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.eliminarProducto(java.lang.Long); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    delete 
    from
        inventario 
    where
        id_inventario=?
2025-10-29 13:35:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    delete 
    from
        productos 
    where
        id_producto=?
2025-10-29 13:36:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:36:09 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:36:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:36:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:36:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:36:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:36:09 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:36:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:36:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:36:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:36:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/5
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/productos/5
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos/5
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/productos/5
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 13:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 13:38:02 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:38:02 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:38:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:38:02 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:02 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:38:02 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:38:02 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:38:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:38:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:38:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:38:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:38:02 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:38:02 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:02 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:38:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:38:02 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:38:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:38:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:38:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:38:13 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:38:13 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-29 13:38:13 [http-nio-8080-exec-5] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-29 13:38:13 [http-nio-8080-exec-5] WARN  p.c.i.backend.service.AuthService - ⚠️ Credenciales inválidas para: cristina1@gmail.com
2025-10-29 13:38:13 [http-nio-8080-exec-5] WARN  p.c.i.b.controller.AuthController - ⚠️ Credenciales inválidas: cristina1@gmail.com
2025-10-29 13:38:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:38:13 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:38:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:38:13 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:38:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:38:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:38:13 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:38:13 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:38:13 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:38:13 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:38:13 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:38:13 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:38:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:38:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:38:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:38:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:38:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:38:16 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:38:16 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:38:16 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:38:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:38:19 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:38:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:38:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:38:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:19 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:38:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:38:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:38:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:38:51 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:38:51 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:38:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:38:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:38:51 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:38:51 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:38:51 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:38:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:38:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:38:51 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:38:51 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:38:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:38:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:38:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:38:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:38:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:38:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:38:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:38:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:39:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:39:04 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:39:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:39:04 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:39:04 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:39:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:05 [http-nio-8080-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:39:05 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:39:05 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:39:05 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:39:05 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:39:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:39:07 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:39:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:39:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:39:07 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:39:07 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:39:07 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:39:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:39:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:39:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/auth/logout
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 13:39:52 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina1@gmail.com
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:39:52 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina1@gmail.com
2025-10-29 13:39:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:39:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:39:52 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 13:39:52 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:39:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:39:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:39:52 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 13:39:52 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:39:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:39:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:39:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:39:52 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:39:52 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 13:39:52 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:39:52 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 13:39:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:39:52 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:39:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:39:52 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:39:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:39:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:39:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:39:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:39:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:39:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:39:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:39:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:40:01 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:40:01 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:40:01 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 13:40:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:40:05 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:40:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:40:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:40:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:40:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:40:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/NaN/detalle
2025-10-29 13:40:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/NaN/detalle
2025-10-29 13:40:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:08 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/NaN/detalle
2025-10-29 13:40:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/NaN/detalle
2025-10-29 13:40:08 [http-nio-8080-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'id': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "NaN"]
2025-10-29 13:40:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-vendido
2025-10-29 13:40:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/por-agotarse?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-baratos?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-recientes?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-baratos
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-vendido
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 13:40:15 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 13:40:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:40:15 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/por-agotarse
2025-10-29 13:40:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:40:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 13:40:15 [http-nio-8080-exec-5] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-recientes
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:40:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/auth/logout
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 13:40:21 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina@gmail.com
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:21 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina@gmail.com
2025-10-29 13:40:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:40:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 13:40:29 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:40:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 13:40:29 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:40:29 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 13:40:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:30 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 13:40:30 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 13:40:30 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:40:30 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 13:40:30 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 13:40:32 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:40:32 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:40:32 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:40:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 13:40:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:40:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 13:40:32 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:40:32 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:40:32 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:40:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:40:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:40:41 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 13:40:41 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 13:40:41 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 13:40:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 13:40:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (calificacion_promedio, id_categoria, descripcion_producto, fecha_actualizacion, fecha_creacion, mongo_product_id, nombre_producto, precio, stock, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        inventario
        (fecha_actualizacion, id_producto, stock_actual, stock_reservado) 
    values
        (?, ?, ?, ?)
2025-10-29 13:42:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        productos 
    set
        calificacion_promedio=?,
        id_categoria=?,
        descripcion_producto=?,
        fecha_actualizacion=?,
        mongo_product_id=?,
        nombre_producto=?,
        precio=?,
        stock=?,
        stock_minimo=? 
    where
        id_producto=?
2025-10-29 13:57:35 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - 🧹 Iniciando limpieza de pedidos preliminares antiguos...
2025-10-29 13:57:36 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pedido,
        p1_0.estado,
        p1_0.estado_pago,
        p1_0.fecha_pago,
        p1_0.fecha_pedido,
        p1_0.id_usuario,
        p1_0.metodo_pago,
        p1_0.numero_pedido,
        p1_0.subtotal,
        p1_0.total,
        p1_0.transaccion_id 
    from
        pedidos p1_0 
    where
        p1_0.estado=? 
        and p1_0.metodo_pago=? 
        and p1_0.fecha_pedido<?
2025-10-29 13:57:36 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - ✅ Limpieza finalizada. Pedidos eliminados: 0
2025-10-29 15:14:54 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Starting BackendApplication using Java 25 with PID 22852 (C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend\target\classes started by USUARIO in C:\Users\USUARIO.DESKTOP-RIG0ADH\Desktop\PROYECTO FINAL 1\ikaza-web\ikaza-backend)
2025-10-29 15:14:54 [restartedMain] DEBUG p.c.ikaza.backend.BackendApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-29 15:14:54 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - The following 1 profile is active: "dev"
2025-10-29 15:14:54 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-29 15:14:54 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-29 15:14:55 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-29 15:14:55 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 107 ms. Found 13 JPA repository interfaces.
2025-10-29 15:14:56 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-29 15:14:56 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-29 15:14:56 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.46]
2025-10-29 15:14:56 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-10-29 15:14:56 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2211 ms
2025-10-29 15:14:56 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-29 15:14:56 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.29.Final
2025-10-29 15:14:57 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-29 15:14:57 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-29 15:14:57 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-29 15:14:57 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3f3e5d6f
2025-10-29 15:14:57 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-29 15:14:57 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-29 15:14:57 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 17.4
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-29 15:14:59 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-29 15:15:00 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-29 15:15:00 [restartedMain] DEBUG p.c.i.b.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-10-29 15:15:01 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-29 15:15:01 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-29 15:15:01 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-29 15:15:02 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-10-29 15:15:03 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-29 15:15:03 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-29 15:15:03 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-10-29 15:15:03 [restartedMain] INFO  p.c.ikaza.backend.BackendApplication - Started BackendApplication in 9.913 seconds (process running for 10.559)
2025-10-29 15:16:04 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-29 15:16:04 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-29 15:16:04 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-10-29 15:16:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 15:16:16 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 15:16:17 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:17 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 15:16:17 [http-nio-8080-exec-6] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-6] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-9] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-9] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-10] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:16:17 [http-nio-8080-exec-10] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 15:16:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:16:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:16:21 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:16:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:16:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:21 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:21 [http-nio-8080-exec-4] WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2025-10-29 15:16:41 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.crearProducto(pe.com.ikaza.backend.dto.request.ProductoRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (calificacion_promedio, id_categoria, descripcion_producto, fecha_actualizacion, fecha_creacion, nombre_producto, precio, stock, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        inventario
        (fecha_actualizacion, id_producto, stock_actual, stock_reservado) 
    values
        (?, ?, ?, ?)
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        producto_detalle
        (atributos, codigo, especificaciones, fecha_actualizacion, fecha_creacion, garantia, imagenes, instrucciones_uso, marca, modelo, id_producto, seo, variantes) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-29 15:16:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?email=cristina1@gmail.com
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/auth/logout
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina1@gmail.com
2025-10-29 15:16:48 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina1@gmail.com
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:48 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina1@gmail.com
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 15:16:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 15:16:57 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 15:16:57 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-29 15:16:57 [http-nio-8080-exec-2] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-29 15:16:57 [http-nio-8080-exec-2] WARN  p.c.i.backend.service.AuthService - ⚠️ Credenciales inválidas para: cristina@gmail.com
2025-10-29 15:16:57 [http-nio-8080-exec-2] WARN  p.c.i.b.controller.AuthController - ⚠️ Credenciales inválidas: cristina@gmail.com
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:16:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 15:17:02 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 15:17:02 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:17:02 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 15:17:06 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:17:06 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:17:06 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:17:06 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:17:06 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-vendido
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/por-agotarse?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-recientes?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/mas-baratos?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:32 [http-nio-8080-exec-7] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-recientes
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/por-agotarse
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:17:32 [http-nio-8080-exec-7] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-baratos
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-vendido
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/7/detalle
2025-10-29 15:18:12 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/7/detalle
2025-10-29 15:18:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:12 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/7/detalle
2025-10-29 15:18:12 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/7/detalle
2025-10-29 15:18:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        d1_0.id_producto_detalle,
        d1_0.atributos,
        d1_0.codigo,
        d1_0.especificaciones,
        d1_0.fecha_actualizacion,
        d1_0.fecha_creacion,
        d1_0.garantia,
        d1_0.imagenes,
        d1_0.instrucciones_uso,
        d1_0.marca,
        d1_0.modelo,
        d1_0.id_producto,
        d1_0.seo,
        d1_0.variantes,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        producto_detalle d1_0 
            on p1_0.id_producto=d1_0.id_producto 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/categoria/3?page=0&size=10
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/categoria/3?page=0&size=10
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/categoria/3
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/categoria/3?page=0&size=10
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    left join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    where
        c1_0.id_categoria=? 
    order by
        p1_0.nombre_producto 
    fetch
        first ? rows only
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:18:30 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:18:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:18:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:18:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/por-agotarse
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-recientes
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-vendido
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 15:18:33 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-baratos
2025-10-29 15:18:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 15:18:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:33 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 15:18:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/7/detalle
2025-10-29 15:18:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:35 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/7/detalle
2025-10-29 15:18:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/7/detalle
2025-10-29 15:18:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        d1_0.id_producto_detalle,
        d1_0.atributos,
        d1_0.codigo,
        d1_0.especificaciones,
        d1_0.fecha_actualizacion,
        d1_0.fecha_creacion,
        d1_0.garantia,
        d1_0.imagenes,
        d1_0.instrucciones_uso,
        d1_0.marca,
        d1_0.modelo,
        d1_0.id_producto,
        d1_0.seo,
        d1_0.variantes,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        producto_detalle d1_0 
            on p1_0.id_producto=d1_0.id_producto 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/categoria/3?page=0&size=10
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/categoria/3
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/categoria/3?page=0&size=10
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    left join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    where
        c1_0.id_categoria=? 
    order by
        p1_0.nombre_producto 
    fetch
        first ? rows only
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:18:45 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:18:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:18:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:18:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-vendido
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-baratos
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/por-agotarse
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina@gmail.com
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/mas-recientes
2025-10-29 15:18:48 [http-nio-8080-exec-2] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina@gmail.com
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-2] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 1
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/7/detalle
2025-10-29 15:18:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:51 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/7/detalle
2025-10-29 15:18:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/7/detalle
2025-10-29 15:18:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        d1_0.id_producto_detalle,
        d1_0.atributos,
        d1_0.codigo,
        d1_0.especificaciones,
        d1_0.fecha_actualizacion,
        d1_0.fecha_creacion,
        d1_0.garantia,
        d1_0.imagenes,
        d1_0.instrucciones_uso,
        d1_0.marca,
        d1_0.modelo,
        d1_0.id_producto,
        d1_0.seo,
        d1_0.variantes,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        producto_detalle d1_0 
            on p1_0.id_producto=d1_0.id_producto 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/categoria/3?page=0&size=10
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/productos/categoria/3
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/categoria/3?page=0&size=10
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    left join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    where
        c1_0.id_categoria=? 
    order by
        p1_0.nombre_producto 
    fetch
        first ? rows only
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:18:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout?email=cristina@gmail.com
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina@gmail.com - URI: /api/auth/logout
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/logout?email=cristina@gmail.com
2025-10-29 15:19:15 [http-nio-8080-exec-8] INFO  p.c.i.b.controller.AuthController - 👋 Cerrando sesión para: cristina@gmail.com
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:15 [http-nio-8080-exec-8] INFO  p.c.i.backend.service.AuthService - 👋 Logout exitoso para: cristina@gmail.com
2025-10-29 15:19:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-recientes?limite=12
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-vendido
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-recientes
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-vendido
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-recientes?limite=12
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-vendido
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.calificacion_promedio desc,
        p1_0.fecha_creacion desc 
    fetch
        first 1 rows only
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/mas-baratos?limite=12
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/mas-baratos
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/mas-baratos?limite=12
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.fecha_creacion desc 
    fetch
        first ? rows only
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/por-agotarse?limite=12
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - 🔓 No hay token Bearer en la petición - URI: /api/productos/por-agotarse
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/por-agotarse?limite=12
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock between 5 and 10 
    order by
        p1_0.stock 
    fetch
        first ? rows only
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    where
        p1_0.stock>0 
    order by
        p1_0.precio 
    fetch
        first ? rows only
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-10-29 15:19:22 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:19:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-10-29 15:19:22 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 15:19:22 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - 🔐 Intento de login para: cristina1@gmail.com
2025-10-29 15:19:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:23 [http-nio-8080-exec-4] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-29 15:19:23 [http-nio-8080-exec-4] INFO  p.c.i.backend.service.AuthService - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        bloqueado_hasta=?,
        email=?,
        email_verificado=?,
        foto_perfil=?,
        intentos_fallidos=?,
        password=?,
        proveedor_auth=?,
        refresh_token=?,
        rol=?,
        token_expiracion=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-29 15:19:23 [http-nio-8080-exec-4] INFO  p.c.i.b.controller.AuthController - ✅ Login exitoso para: cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:19:23 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-1] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para email: cristina1@gmail.com
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-29 15:19:23 [http-nio-8080-exec-1] INFO  p.c.i.backend.service.ClienteService - 📋 Perfil incompleto para cliente con ID: 2
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:19:28 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/inventario/movimientos/producto/5
2025-10-29 15:19:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/inventario/movimientos/producto/5
2025-10-29 15:19:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:28 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/inventario/movimientos/producto/5
2025-10-29 15:19:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/inventario/movimientos/producto/5
2025-10-29 15:19:28 [http-nio-8080-exec-8] INFO  p.c.i.b.s.InventarioAdminService - Obteniendo movimientos para producto: 5
2025-10-29 15:19:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mi1_0.id_movimiento,
        mi1_0.cantidad,
        mi1_0.fecha_movimiento,
        mi1_0.motivo,
        mi1_0.id_producto,
        mi1_0.stock_anterior,
        mi1_0.stock_nuevo,
        mi1_0.tipo_movimiento,
        mi1_0.id_usuario 
    from
        movimientos_inventario mi1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=mi1_0.id_producto 
    where
        p1_0.id_producto=? 
    order by
        mi1_0.fecha_movimiento desc
2025-10-29 15:19:33 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/inventario/movimientos/producto/7
2025-10-29 15:19:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/inventario/movimientos/producto/7
2025-10-29 15:19:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:33 [http-nio-8080-exec-6] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/inventario/movimientos/producto/7
2025-10-29 15:19:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/inventario/movimientos/producto/7
2025-10-29 15:19:33 [http-nio-8080-exec-6] INFO  p.c.i.b.s.InventarioAdminService - Obteniendo movimientos para producto: 7
2025-10-29 15:19:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        mi1_0.id_movimiento,
        mi1_0.cantidad,
        mi1_0.fecha_movimiento,
        mi1_0.motivo,
        mi1_0.id_producto,
        mi1_0.stock_anterior,
        mi1_0.stock_nuevo,
        mi1_0.tipo_movimiento,
        mi1_0.id_usuario 
    from
        movimientos_inventario mi1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=mi1_0.id_producto 
    where
        p1_0.id_producto=? 
    order by
        mi1_0.fecha_movimiento desc
2025-10-29 15:19:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/inventario/producto/7/ajustar
2025-10-29 15:19:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:49 [http-nio-8080-exec-2] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/inventario/producto/7/ajustar
2025-10-29 15:19:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:49 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `pe.com.ikaza.backend.entity.MovimientoInventario$TipoMovimiento` from String "entrada": not one of the values accepted for Enum class: [SALIDA, ENTRADA, DEVOLUCION, AJUSTE]]
2025-10-29 15:19:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:54 [http-nio-8080-exec-4] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/inventario/producto/7/ajustar
2025-10-29 15:19:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:54 [http-nio-8080-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `pe.com.ikaza.backend.entity.MovimientoInventario$TipoMovimiento` from String "entrada": not one of the values accepted for Enum class: [SALIDA, ENTRADA, DEVOLUCION, AJUSTE]]
2025-10-29 15:19:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:55 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/inventario/producto/7/ajustar
2025-10-29 15:19:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:55 [http-nio-8080-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `pe.com.ikaza.backend.entity.MovimientoInventario$TipoMovimiento` from String "entrada": not one of the values accepted for Enum class: [SALIDA, ENTRADA, DEVOLUCION, AJUSTE]]
2025-10-29 15:19:59 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:59 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:19:59 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:19:59 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/inventario/producto/7/ajustar
2025-10-29 15:19:59 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/inventario/producto/7/ajustar
2025-10-29 15:19:59 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `pe.com.ikaza.backend.entity.MovimientoInventario$TipoMovimiento` from String "entrada": not one of the values accepted for Enum class: [SALIDA, ENTRADA, DEVOLUCION, AJUSTE]]
2025-10-29 15:20:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:20:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:20:13 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:20:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:20:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.id_categoria=?
2025-10-29 15:20:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:20:14 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:20:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    where
        i1_0.id_producto=?
2025-10-29 15:20:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        pd1_0.id_producto=?
2025-10-29 15:20:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:20:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:21:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-29 15:21:29 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-29 15:21:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-29 15:21:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-29 15:21:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id_producto) 
    from
        productos p1_0 
    where
        p1_0.id_categoria=?
2025-10-29 15:24:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/5
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/productos/5
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos/5
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/productos/5
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        d1_0.id_producto_detalle,
        d1_0.atributos,
        d1_0.codigo,
        d1_0.especificaciones,
        d1_0.fecha_actualizacion,
        d1_0.fecha_creacion,
        d1_0.garantia,
        d1_0.imagenes,
        d1_0.instrucciones_uso,
        d1_0.marca,
        d1_0.modelo,
        d1_0.id_producto,
        d1_0.seo,
        d1_0.variantes,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        producto_detalle d1_0 
            on p1_0.id_producto=d1_0.id_producto 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:24:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/productos/5
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.bloqueado_hasta,
        u1_0.email,
        u1_0.email_verificado,
        u1_0.fecha_creacion,
        u1_0.foto_perfil,
        u1_0.intentos_fallidos,
        u1_0.password,
        u1_0.proveedor_auth,
        u1_0.refresh_token,
        u1_0.rol,
        u1_0.token_expiracion,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.email=?
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG p.c.i.b.s.JwtAuthenticationFilter - ✅ Usuario autenticado: cristina1@gmail.com - URI: /api/productos/5
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/productos/5
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity pe.com.ikaza.backend.controller.ProductoController.actualizarProducto(java.lang.Long,pe.com.ikaza.backend.dto.request.ProductoUpdateRequest); target is of class [pe.com.ikaza.backend.controller.ProductoController]
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria,
        p1_0.descripcion_producto,
        d1_0.id_producto_detalle,
        d1_0.atributos,
        d1_0.codigo,
        d1_0.especificaciones,
        d1_0.fecha_actualizacion,
        d1_0.fecha_creacion,
        d1_0.garantia,
        d1_0.imagenes,
        d1_0.instrucciones_uso,
        d1_0.marca,
        d1_0.modelo,
        d1_0.id_producto,
        d1_0.seo,
        d1_0.variantes,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id_categoria=p1_0.id_categoria 
    left join
        producto_detalle d1_0 
            on p1_0.id_producto=d1_0.id_producto 
    left join
        inventario i1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        productos 
    set
        calificacion_promedio=?,
        id_categoria=?,
        descripcion_producto=?,
        fecha_actualizacion=?,
        nombre_producto=?,
        precio=?,
        stock=?,
        stock_minimo=? 
    where
        id_producto=?
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.id_inventario,
        i1_0.fecha_actualizacion,
        i1_0.id_producto,
        i1_0.stock_actual,
        i1_0.stock_disponible,
        i1_0.stock_reservado 
    from
        inventario i1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=i1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        pd1_0.id_producto_detalle,
        pd1_0.atributos,
        pd1_0.codigo,
        pd1_0.especificaciones,
        pd1_0.fecha_actualizacion,
        pd1_0.fecha_creacion,
        pd1_0.garantia,
        pd1_0.imagenes,
        pd1_0.instrucciones_uso,
        pd1_0.marca,
        pd1_0.modelo,
        pd1_0.id_producto,
        pd1_0.seo,
        pd1_0.variantes 
    from
        producto_detalle pd1_0 
    left join
        productos p1_0 
            on p1_0.id_producto=pd1_0.id_producto 
    where
        p1_0.id_producto=?
2025-10-29 15:24:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        inventario 
    set
        fecha_actualizacion=?,
        id_producto=?,
        stock_actual=?,
        stock_reservado=? 
    where
        id_inventario=?
