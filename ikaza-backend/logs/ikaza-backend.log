2025-10-26 00:26:01 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - 🧹 Iniciando limpieza de pedidos preliminares antiguos...
2025-10-26 00:26:03 [scheduling-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_pedido,
        p1_0.estado,
        p1_0.estado_pago,
        p1_0.fecha_pago,
        p1_0.fecha_pedido,
        p1_0.id_usuario,
        p1_0.metodo_pago,
        p1_0.numero_pedido,
        p1_0.subtotal,
        p1_0.total,
        p1_0.transaccion_id 
    from
        pedidos p1_0 
    where
        p1_0.estado=? 
        and p1_0.metodo_pago=? 
        and p1_0.fecha_pedido<?
2025-10-26 00:26:03 [scheduling-1] INFO  p.c.i.backend.service.PedidoService - ✅ Limpieza finalizada. Pedidos eliminados: 0
2025-10-26 00:48:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-26 00:48:24 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-10-26 00:48:27 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-26 00:48:27 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/categorias
2025-10-26 00:48:27 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-26 00:48:27 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-26 00:48:27 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos?page=0&size=1000&sort=nombreProducto&direction=ASC
2025-10-26 00:48:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-10-26 00:48:27 [http-nio-8080-exec-8] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/productos
2025-10-26 00:48:27 [http-nio-8080-exec-9] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/categorias
2025-10-26 00:48:47 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id_producto,
        p1_0.calificacion_promedio,
        p1_0.id_categoria,
        p1_0.descripcion_producto,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.mongo_product_id,
        p1_0.nombre_producto,
        p1_0.precio,
        p1_0.stock,
        p1_0.stock_minimo 
    from
        productos p1_0 
    order by
        p1_0.nombre_producto 
    offset
        ? rows 
    fetch
        first ? rows only
2025-10-26 00:48:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_categoria,
        c1_0.activo,
        c1_0.descripcion_categoria,
        c1_0.fecha_creacion,
        c1_0.nombre_categoria 
    from
        categorias c1_0 
    where
        c1_0.activo 
    order by
        c1_0.nombre_categoria
2025-10-26 00:49:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login-token
2025-10-26 00:49:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login-token
2025-10-26 00:49:37 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/login-token
2025-10-26 00:49:37 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-26 00:49:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login-token
2025-10-26 00:49:37 [http-nio-8080-exec-3] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🚫 Excluyendo del filtro: /api/auth/login-token
2025-10-26 00:49:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/clientes/perfil/8wt28JyURmakufMgVHetif7bWaB2
2025-10-26 00:49:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/clientes/perfil/8wt28JyURmakufMgVHetif7bWaB2
2025-10-26 00:49:40 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/clientes/perfil/8wt28JyURmakufMgVHetif7bWaB2
2025-10-26 00:49:41 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Token válido - UID: 8wt28JyURmakufMgVHetif7bWaB2, Email: paulomoronpoma@gmail.com
2025-10-26 00:49:42 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - 🔐 Intento de login con token (Social/Estandar)
2025-10-26 00:49:42 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - Verificando ID Token de Firebase para login/sincronización...
2025-10-26 00:49:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.firebase_uid,
        u1_0.password,
        u1_0.id_rol,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-26 00:49:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.firebase_uid,
        u1_0.password,
        u1_0.id_rol,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-26 00:49:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-26 00:49:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-26 00:49:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-26 00:49:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-26 00:49:44 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - 🔑 Rol obtenido de Firebase claims: CLIENTE
2025-10-26 00:49:44 [http-nio-8080-exec-5] INFO  p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Usuario autenticado: paulomoronpoma@gmail.com (rol: CLIENTE)
2025-10-26 00:49:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/clientes/perfil/8wt28JyURmakufMgVHetif7bWaB2
2025-10-26 00:49:44 [http-nio-8080-exec-5] DEBUG p.c.i.b.s.FirebaseAuthTokenFilter - ✅ Aplicando filtro a: /api/clientes/perfil/8wt28JyURmakufMgVHetif7bWaB2
2025-10-26 00:49:45 [http-nio-8080-exec-5] INFO  p.c.i.b.controller.ClienteController - 👤 Obteniendo perfil para UID: 8wt28JyURmakufMgVHetif7bWaB2
2025-10-26 00:49:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id_usuario,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_actualizacion,
        u1_0.fecha_creacion,
        u1_0.firebase_uid,
        u1_0.password,
        u1_0.id_rol,
        u1_0.ultimo_acceso 
    from
        usuarios u1_0 
    where
        u1_0.firebase_uid=?
2025-10-26 00:49:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    where
        c1_0.id_usuario=?
2025-10-26 00:49:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id_rol,
        r1_0.descripcion_rol,
        r1_0.nombre_rol 
    from
        roles r1_0 
    where
        r1_0.id_rol=?
2025-10-26 00:49:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id_cliente,
        c1_0.apellidos_cliente,
        c1_0.fecha_actualizacion,
        c1_0.fecha_nacimiento,
        c1_0.genero,
        c1_0.nombres_cliente,
        c1_0.numero_documento,
        c1_0.prefijo_telefono,
        c1_0.telefono,
        c1_0.telefono_verificado,
        c1_0.tipo_documento,
        c1_0.id_usuario 
    from
        clientes c1_0 
    left join
        usuarios u1_0 
            on u1_0.id_usuario=c1_0.id_usuario 
    where
        u1_0.id_usuario=?
2025-10-26 00:49:45 [http-nio-8080-exec-3] INFO  p.c.i.backend.service.AuthService - Sincronización/Login exitoso para: paulomoronpoma@gmail.com
2025-10-26 00:49:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        email=?,
        fecha_actualizacion=?,
        firebase_uid=?,
        password=?,
        id_rol=?,
        ultimo_acceso=? 
    where
        id_usuario=?
2025-10-26 00:49:48 [http-nio-8080-exec-3] INFO  p.c.i.b.controller.AuthController - ✅ Login/Sincronización exitosa para UID: 8wt28JyURmakufMgVHetif7bWaB2
